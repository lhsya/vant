{"remainingRequest":"/Users/adamliu/works/vant/node_modules/babel-loader/lib/index.js!/Users/adamliu/works/vant/src/sku/components/SkuMessages.js","dependencies":[{"path":"/Users/adamliu/works/vant/src/sku/components/SkuMessages.js","mtime":1694509705028},{"path":"/Users/adamliu/works/vant/babel.config.js","mtime":1694509704583},{"path":"/Users/adamliu/works/vant/node_modules/cache-loader/dist/cjs.js","mtime":1694509793427},{"path":"/Users/adamliu/works/vant/node_modules/babel-loader/lib/index.js","mtime":1694509794381}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}