{"remainingRequest":"/Users/adamliu/vant/node_modules/babel-loader/lib/index.js!/Users/adamliu/vant/node_modules/url/url.js","dependencies":[{"path":"/Users/adamliu/vant/node_modules/url/url.js","mtime":1694509794710},{"path":"/Users/adamliu/vant/babel.config.js","mtime":1694509704583},{"path":"/Users/adamliu/vant/node_modules/cache-loader/dist/cjs.js","mtime":1694509793427},{"path":"/Users/adamliu/vant/node_modules/babel-loader/lib/index.js","mtime":1694509794381}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoKICogQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuCiAqCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCiAqIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKICogIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwogKiB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCiAqIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQKICogcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlCiAqIGZvbGxvd2luZyBjb25kaXRpb25zOgogKgogKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZAogKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KICoKICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKICogT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgogKiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOCiAqIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLAogKiBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IKICogT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRQogKiBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgogKi8KCid1c2Ugc3RyaWN0JzsKCnZhciBwdW55Y29kZSA9IHJlcXVpcmUoJ3B1bnljb2RlJyk7CmZ1bmN0aW9uIFVybCgpIHsKICB0aGlzLnByb3RvY29sID0gbnVsbDsKICB0aGlzLnNsYXNoZXMgPSBudWxsOwogIHRoaXMuYXV0aCA9IG51bGw7CiAgdGhpcy5ob3N0ID0gbnVsbDsKICB0aGlzLnBvcnQgPSBudWxsOwogIHRoaXMuaG9zdG5hbWUgPSBudWxsOwogIHRoaXMuaGFzaCA9IG51bGw7CiAgdGhpcy5zZWFyY2ggPSBudWxsOwogIHRoaXMucXVlcnkgPSBudWxsOwogIHRoaXMucGF0aG5hbWUgPSBudWxsOwogIHRoaXMucGF0aCA9IG51bGw7CiAgdGhpcy5ocmVmID0gbnVsbDsKfQoKLy8gUmVmZXJlbmNlOiBSRkMgMzk4NiwgUkZDIDE4MDgsIFJGQyAyMzk2CgovKgogKiBkZWZpbmUgdGhlc2UgaGVyZSBzbyBhdCBsZWFzdCB0aGV5IG9ubHkgaGF2ZSB0byBiZQogKiBjb21waWxlZCBvbmNlIG9uIHRoZSBmaXJzdCBtb2R1bGUgbG9hZC4KICovCnZhciBwcm90b2NvbFBhdHRlcm4gPSAvXihbYS16MC05ListXSs6KS9pLAogIHBvcnRQYXR0ZXJuID0gLzpbMC05XSokLywKICAvLyBTcGVjaWFsIGNhc2UgZm9yIGEgc2ltcGxlIHBhdGggVVJMCiAgc2ltcGxlUGF0aFBhdHRlcm4gPSAvXihcL1wvPyg/IVwvKVteP1xzXSopKFw/W15cc10qKT8kLywKICAvKgogICAqIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIHJlc2VydmVkIGZvciBkZWxpbWl0aW5nIFVSTHMuCiAgICogV2UgYWN0dWFsbHkganVzdCBhdXRvLWVzY2FwZSB0aGVzZS4KICAgKi8KICBkZWxpbXMgPSBbJzwnLCAnPicsICciJywgJ2AnLCAnICcsICdccicsICdcbicsICdcdCddLAogIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIG5vdCBhbGxvd2VkIGZvciB2YXJpb3VzIHJlYXNvbnMuCiAgdW53aXNlID0gWyd7JywgJ30nLCAnfCcsICdcXCcsICdeJywgJ2AnXS5jb25jYXQoZGVsaW1zKSwKICAvLyBBbGxvd2VkIGJ5IFJGQ3MsIGJ1dCBjYXVzZSBvZiBYU1MgYXR0YWNrcy4gIEFsd2F5cyBlc2NhcGUgdGhlc2UuCiAgYXV0b0VzY2FwZSA9IFsnXCcnXS5jb25jYXQodW53aXNlKSwKICAvKgogICAqIENoYXJhY3RlcnMgdGhhdCBhcmUgbmV2ZXIgZXZlciBhbGxvd2VkIGluIGEgaG9zdG5hbWUuCiAgICogTm90ZSB0aGF0IGFueSBpbnZhbGlkIGNoYXJzIGFyZSBhbHNvIGhhbmRsZWQsIGJ1dCB0aGVzZQogICAqIGFyZSB0aGUgb25lcyB0aGF0IGFyZSAqZXhwZWN0ZWQqIHRvIGJlIHNlZW4sIHNvIHdlIGZhc3QtcGF0aAogICAqIHRoZW0uCiAgICovCiAgbm9uSG9zdENoYXJzID0gWyclJywgJy8nLCAnPycsICc7JywgJyMnXS5jb25jYXQoYXV0b0VzY2FwZSksCiAgaG9zdEVuZGluZ0NoYXJzID0gWycvJywgJz8nLCAnIyddLAogIGhvc3RuYW1lTWF4TGVuID0gMjU1LAogIGhvc3RuYW1lUGFydFBhdHRlcm4gPSAvXlsrYS16MC05QS1aXy1dezAsNjN9JC8sCiAgaG9zdG5hbWVQYXJ0U3RhcnQgPSAvXihbK2EtejAtOUEtWl8tXXswLDYzfSkoLiopJC8sCiAgLy8gcHJvdG9jb2xzIHRoYXQgY2FuIGFsbG93ICJ1bnNhZmUiIGFuZCAidW53aXNlIiBjaGFycy4KICB1bnNhZmVQcm90b2NvbCA9IHsKICAgIGphdmFzY3JpcHQ6IHRydWUsCiAgICAnamF2YXNjcmlwdDonOiB0cnVlCiAgfSwKICAvLyBwcm90b2NvbHMgdGhhdCBuZXZlciBoYXZlIGEgaG9zdG5hbWUuCiAgaG9zdGxlc3NQcm90b2NvbCA9IHsKICAgIGphdmFzY3JpcHQ6IHRydWUsCiAgICAnamF2YXNjcmlwdDonOiB0cnVlCiAgfSwKICAvLyBwcm90b2NvbHMgdGhhdCBhbHdheXMgY29udGFpbiBhIC8vIGJpdC4KICBzbGFzaGVkUHJvdG9jb2wgPSB7CiAgICBodHRwOiB0cnVlLAogICAgaHR0cHM6IHRydWUsCiAgICBmdHA6IHRydWUsCiAgICBnb3BoZXI6IHRydWUsCiAgICBmaWxlOiB0cnVlLAogICAgJ2h0dHA6JzogdHJ1ZSwKICAgICdodHRwczonOiB0cnVlLAogICAgJ2Z0cDonOiB0cnVlLAogICAgJ2dvcGhlcjonOiB0cnVlLAogICAgJ2ZpbGU6JzogdHJ1ZQogIH0sCiAgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxcycpOwpmdW5jdGlvbiB1cmxQYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7CiAgaWYgKHVybCAmJiB0eXBlb2YgdXJsID09PSAnb2JqZWN0JyAmJiB1cmwgaW5zdGFuY2VvZiBVcmwpIHsKICAgIHJldHVybiB1cmw7CiAgfQogIHZhciB1ID0gbmV3IFVybCgpOwogIHUucGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCk7CiAgcmV0dXJuIHU7Cn0KVXJsLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uICh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7CiAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJQYXJhbWV0ZXIgJ3VybCcgbXVzdCBiZSBhIHN0cmluZywgbm90ICIgKyB0eXBlb2YgdXJsKTsKICB9CgogIC8qCiAgICogQ29weSBjaHJvbWUsIElFLCBvcGVyYSBiYWNrc2xhc2gtaGFuZGxpbmcgYmVoYXZpb3IuCiAgICogQmFjayBzbGFzaGVzIGJlZm9yZSB0aGUgcXVlcnkgc3RyaW5nIGdldCBjb252ZXJ0ZWQgdG8gZm9yd2FyZCBzbGFzaGVzCiAgICogU2VlOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjU5MTYKICAgKi8KICB2YXIgcXVlcnlJbmRleCA9IHVybC5pbmRleE9mKCc/JyksCiAgICBzcGxpdHRlciA9IHF1ZXJ5SW5kZXggIT09IC0xICYmIHF1ZXJ5SW5kZXggPCB1cmwuaW5kZXhPZignIycpID8gJz8nIDogJyMnLAogICAgdVNwbGl0ID0gdXJsLnNwbGl0KHNwbGl0dGVyKSwKICAgIHNsYXNoUmVnZXggPSAvXFwvZzsKICB1U3BsaXRbMF0gPSB1U3BsaXRbMF0ucmVwbGFjZShzbGFzaFJlZ2V4LCAnLycpOwogIHVybCA9IHVTcGxpdC5qb2luKHNwbGl0dGVyKTsKICB2YXIgcmVzdCA9IHVybDsKCiAgLyoKICAgKiB0cmltIGJlZm9yZSBwcm9jZWVkaW5nLgogICAqIFRoaXMgaXMgdG8gc3VwcG9ydCBwYXJzZSBzdHVmZiBsaWtlICIgIGh0dHA6Ly9mb28uY29tICBcbiIKICAgKi8KICByZXN0ID0gcmVzdC50cmltKCk7CiAgaWYgKCFzbGFzaGVzRGVub3RlSG9zdCAmJiB1cmwuc3BsaXQoJyMnKS5sZW5ndGggPT09IDEpIHsKICAgIC8vIFRyeSBmYXN0IHBhdGggcmVnZXhwCiAgICB2YXIgc2ltcGxlUGF0aCA9IHNpbXBsZVBhdGhQYXR0ZXJuLmV4ZWMocmVzdCk7CiAgICBpZiAoc2ltcGxlUGF0aCkgewogICAgICB0aGlzLnBhdGggPSByZXN0OwogICAgICB0aGlzLmhyZWYgPSByZXN0OwogICAgICB0aGlzLnBhdGhuYW1lID0gc2ltcGxlUGF0aFsxXTsKICAgICAgaWYgKHNpbXBsZVBhdGhbMl0pIHsKICAgICAgICB0aGlzLnNlYXJjaCA9IHNpbXBsZVBhdGhbMl07CiAgICAgICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHsKICAgICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLnNlYXJjaC5zdWJzdHIoMSkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5zZWFyY2guc3Vic3RyKDEpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7CiAgICAgICAgdGhpcy5zZWFyY2ggPSAnJzsKICAgICAgICB0aGlzLnF1ZXJ5ID0ge307CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgfQogIHZhciBwcm90byA9IHByb3RvY29sUGF0dGVybi5leGVjKHJlc3QpOwogIGlmIChwcm90bykgewogICAgcHJvdG8gPSBwcm90b1swXTsKICAgIHZhciBsb3dlclByb3RvID0gcHJvdG8udG9Mb3dlckNhc2UoKTsKICAgIHRoaXMucHJvdG9jb2wgPSBsb3dlclByb3RvOwogICAgcmVzdCA9IHJlc3Quc3Vic3RyKHByb3RvLmxlbmd0aCk7CiAgfQoKICAvKgogICAqIGZpZ3VyZSBvdXQgaWYgaXQncyBnb3QgYSBob3N0CiAgICogdXNlckBzZXJ2ZXIgaXMgKmFsd2F5cyogaW50ZXJwcmV0ZWQgYXMgYSBob3N0bmFtZSwgYW5kIHVybAogICAqIHJlc29sdXRpb24gd2lsbCB0cmVhdCAvL2Zvby9iYXIgYXMgaG9zdD1mb28scGF0aD1iYXIgYmVjYXVzZSB0aGF0J3MKICAgKiBob3cgdGhlIGJyb3dzZXIgcmVzb2x2ZXMgcmVsYXRpdmUgVVJMcy4KICAgKi8KICBpZiAoc2xhc2hlc0Rlbm90ZUhvc3QgfHwgcHJvdG8gfHwgcmVzdC5tYXRjaCgvXlwvXC9bXkAvXStAW15AL10rLykpIHsKICAgIHZhciBzbGFzaGVzID0gcmVzdC5zdWJzdHIoMCwgMikgPT09ICcvLyc7CiAgICBpZiAoc2xhc2hlcyAmJiAhKHByb3RvICYmIGhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dKSkgewogICAgICByZXN0ID0gcmVzdC5zdWJzdHIoMik7CiAgICAgIHRoaXMuc2xhc2hlcyA9IHRydWU7CiAgICB9CiAgfQogIGlmICghaG9zdGxlc3NQcm90b2NvbFtwcm90b10gJiYgKHNsYXNoZXMgfHwgcHJvdG8gJiYgIXNsYXNoZWRQcm90b2NvbFtwcm90b10pKSB7CiAgICAvKgogICAgICogdGhlcmUncyBhIGhvc3RuYW1lLgogICAgICogdGhlIGZpcnN0IGluc3RhbmNlIG9mIC8sID8sIDssIG9yICMgZW5kcyB0aGUgaG9zdC4KICAgICAqCiAgICAgKiBJZiB0aGVyZSBpcyBhbiBAIGluIHRoZSBob3N0bmFtZSwgdGhlbiBub24taG9zdCBjaGFycyAqYXJlKiBhbGxvd2VkCiAgICAgKiB0byB0aGUgbGVmdCBvZiB0aGUgbGFzdCBAIHNpZ24sIHVubGVzcyBzb21lIGhvc3QtZW5kaW5nIGNoYXJhY3RlcgogICAgICogY29tZXMgKmJlZm9yZSogdGhlIEAtc2lnbi4KICAgICAqIFVSTHMgYXJlIG9ibm94aW91cy4KICAgICAqCiAgICAgKiBleDoKICAgICAqIGh0dHA6Ly9hQGJAYy8gPT4gdXNlcjphQGIgaG9zdDpjCiAgICAgKiBodHRwOi8vYUBiP0BjID0+IHVzZXI6YSBob3N0OmMgcGF0aDovP0BjCiAgICAgKi8KCiAgICAvKgogICAgICogdjAuMTIgVE9ETyhpc2FhY3MpOiBUaGlzIGlzIG5vdCBxdWl0ZSBob3cgQ2hyb21lIGRvZXMgdGhpbmdzLgogICAgICogUmV2aWV3IG91ciB0ZXN0IGNhc2UgYWdhaW5zdCBicm93c2VycyBtb3JlIGNvbXByZWhlbnNpdmVseS4KICAgICAqLwoKICAgIC8vIGZpbmQgdGhlIGZpcnN0IGluc3RhbmNlIG9mIGFueSBob3N0RW5kaW5nQ2hhcnMKICAgIHZhciBob3N0RW5kID0gLTE7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvc3RFbmRpbmdDaGFycy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKGhvc3RFbmRpbmdDaGFyc1tpXSk7CiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSkgewogICAgICAgIGhvc3RFbmQgPSBoZWM7CiAgICAgIH0KICAgIH0KCiAgICAvKgogICAgICogYXQgdGhpcyBwb2ludCwgZWl0aGVyIHdlIGhhdmUgYW4gZXhwbGljaXQgcG9pbnQgd2hlcmUgdGhlCiAgICAgKiBhdXRoIHBvcnRpb24gY2Fubm90IGdvIHBhc3QsIG9yIHRoZSBsYXN0IEAgY2hhciBpcyB0aGUgZGVjaWRlci4KICAgICAqLwogICAgdmFyIGF1dGgsIGF0U2lnbjsKICAgIGlmIChob3N0RW5kID09PSAtMSkgewogICAgICAvLyBhdFNpZ24gY2FuIGJlIGFueXdoZXJlLgogICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJyk7CiAgICB9IGVsc2UgewogICAgICAvKgogICAgICAgKiBhdFNpZ24gbXVzdCBiZSBpbiBhdXRoIHBvcnRpb24uCiAgICAgICAqIGh0dHA6Ly9hQGIvY0BkID0+IGhvc3Q6YiBhdXRoOmEgcGF0aDovY0BkCiAgICAgICAqLwogICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJywgaG9zdEVuZCk7CiAgICB9CgogICAgLyoKICAgICAqIE5vdyB3ZSBoYXZlIGEgcG9ydGlvbiB3aGljaCBpcyBkZWZpbml0ZWx5IHRoZSBhdXRoLgogICAgICogUHVsbCB0aGF0IG9mZi4KICAgICAqLwogICAgaWYgKGF0U2lnbiAhPT0gLTEpIHsKICAgICAgYXV0aCA9IHJlc3Quc2xpY2UoMCwgYXRTaWduKTsKICAgICAgcmVzdCA9IHJlc3Quc2xpY2UoYXRTaWduICsgMSk7CiAgICAgIHRoaXMuYXV0aCA9IGRlY29kZVVSSUNvbXBvbmVudChhdXRoKTsKICAgIH0KCiAgICAvLyB0aGUgaG9zdCBpcyB0aGUgcmVtYWluaW5nIHRvIHRoZSBsZWZ0IG9mIHRoZSBmaXJzdCBub24taG9zdCBjaGFyCiAgICBob3N0RW5kID0gLTE7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vbkhvc3RDaGFycy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKG5vbkhvc3RDaGFyc1tpXSk7CiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSkgewogICAgICAgIGhvc3RFbmQgPSBoZWM7CiAgICAgIH0KICAgIH0KICAgIC8vIGlmIHdlIHN0aWxsIGhhdmUgbm90IGhpdCBpdCwgdGhlbiB0aGUgZW50aXJlIHRoaW5nIGlzIGEgaG9zdC4KICAgIGlmIChob3N0RW5kID09PSAtMSkgewogICAgICBob3N0RW5kID0gcmVzdC5sZW5ndGg7CiAgICB9CiAgICB0aGlzLmhvc3QgPSByZXN0LnNsaWNlKDAsIGhvc3RFbmQpOwogICAgcmVzdCA9IHJlc3Quc2xpY2UoaG9zdEVuZCk7CgogICAgLy8gcHVsbCBvdXQgcG9ydC4KICAgIHRoaXMucGFyc2VIb3N0KCk7CgogICAgLyoKICAgICAqIHdlJ3ZlIGluZGljYXRlZCB0aGF0IHRoZXJlIGlzIGEgaG9zdG5hbWUsCiAgICAgKiBzbyBldmVuIGlmIGl0J3MgZW1wdHksIGl0IGhhcyB0byBiZSBwcmVzZW50LgogICAgICovCiAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZSB8fCAnJzsKCiAgICAvKgogICAgICogaWYgaG9zdG5hbWUgYmVnaW5zIHdpdGggWyBhbmQgZW5kcyB3aXRoIF0KICAgICAqIGFzc3VtZSB0aGF0IGl0J3MgYW4gSVB2NiBhZGRyZXNzLgogICAgICovCiAgICB2YXIgaXB2Nkhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZVswXSA9PT0gJ1snICYmIHRoaXMuaG9zdG5hbWVbdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAxXSA9PT0gJ10nOwoKICAgIC8vIHZhbGlkYXRlIGEgbGl0dGxlLgogICAgaWYgKCFpcHY2SG9zdG5hbWUpIHsKICAgICAgdmFyIGhvc3RwYXJ0cyA9IHRoaXMuaG9zdG5hbWUuc3BsaXQoL1wuLyk7CiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gaG9zdHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIHZhciBwYXJ0ID0gaG9zdHBhcnRzW2ldOwogICAgICAgIGlmICghcGFydCkgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGlmICghcGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkgewogICAgICAgICAgdmFyIG5ld3BhcnQgPSAnJzsKICAgICAgICAgIGZvciAodmFyIGogPSAwLCBrID0gcGFydC5sZW5ndGg7IGogPCBrOyBqKyspIHsKICAgICAgICAgICAgaWYgKHBhcnQuY2hhckNvZGVBdChqKSA+IDEyNykgewogICAgICAgICAgICAgIC8qCiAgICAgICAgICAgICAgICogd2UgcmVwbGFjZSBub24tQVNDSUkgY2hhciB3aXRoIGEgdGVtcG9yYXJ5IHBsYWNlaG9sZGVyCiAgICAgICAgICAgICAgICogd2UgbmVlZCB0aGlzIHRvIG1ha2Ugc3VyZSBzaXplIG9mIGhvc3RuYW1lIGlzIG5vdAogICAgICAgICAgICAgICAqIGJyb2tlbiBieSByZXBsYWNpbmcgbm9uLUFTQ0lJIGJ5IG5vdGhpbmcKICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICBuZXdwYXJ0ICs9ICd4JzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBuZXdwYXJ0ICs9IHBhcnRbal07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIC8vIHdlIHRlc3QgYWdhaW4gd2l0aCBBU0NJSSBjaGFyIG9ubHkKICAgICAgICAgIGlmICghbmV3cGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkgewogICAgICAgICAgICB2YXIgdmFsaWRQYXJ0cyA9IGhvc3RwYXJ0cy5zbGljZSgwLCBpKTsKICAgICAgICAgICAgdmFyIG5vdEhvc3QgPSBob3N0cGFydHMuc2xpY2UoaSArIDEpOwogICAgICAgICAgICB2YXIgYml0ID0gcGFydC5tYXRjaChob3N0bmFtZVBhcnRTdGFydCk7CiAgICAgICAgICAgIGlmIChiaXQpIHsKICAgICAgICAgICAgICB2YWxpZFBhcnRzLnB1c2goYml0WzFdKTsKICAgICAgICAgICAgICBub3RIb3N0LnVuc2hpZnQoYml0WzJdKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobm90SG9zdC5sZW5ndGgpIHsKICAgICAgICAgICAgICByZXN0ID0gJy8nICsgbm90SG9zdC5qb2luKCcuJykgKyByZXN0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuaG9zdG5hbWUgPSB2YWxpZFBhcnRzLmpvaW4oJy4nKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAodGhpcy5ob3N0bmFtZS5sZW5ndGggPiBob3N0bmFtZU1heExlbikgewogICAgICB0aGlzLmhvc3RuYW1lID0gJyc7CiAgICB9IGVsc2UgewogICAgICAvLyBob3N0bmFtZXMgYXJlIGFsd2F5cyBsb3dlciBjYXNlLgogICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS50b0xvd2VyQ2FzZSgpOwogICAgfQogICAgaWYgKCFpcHY2SG9zdG5hbWUpIHsKICAgICAgLyoKICAgICAgICogSUROQSBTdXBwb3J0OiBSZXR1cm5zIGEgcHVueWNvZGVkIHJlcHJlc2VudGF0aW9uIG9mICJkb21haW4iLgogICAgICAgKiBJdCBvbmx5IGNvbnZlcnRzIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB0aGF0CiAgICAgICAqIGhhdmUgbm9uLUFTQ0lJIGNoYXJhY3RlcnMsIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWYKICAgICAgICogeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0IGFscmVhZHkgaXMgQVNDSUktb25seS4KICAgICAgICovCiAgICAgIHRoaXMuaG9zdG5hbWUgPSBwdW55Y29kZS50b0FTQ0lJKHRoaXMuaG9zdG5hbWUpOwogICAgfQogICAgdmFyIHAgPSB0aGlzLnBvcnQgPyAnOicgKyB0aGlzLnBvcnQgOiAnJzsKICAgIHZhciBoID0gdGhpcy5ob3N0bmFtZSB8fCAnJzsKICAgIHRoaXMuaG9zdCA9IGggKyBwOwogICAgdGhpcy5ocmVmICs9IHRoaXMuaG9zdDsKCiAgICAvKgogICAgICogc3RyaXAgWyBhbmQgXSBmcm9tIHRoZSBob3N0bmFtZQogICAgICogdGhlIGhvc3QgZmllbGQgc3RpbGwgcmV0YWlucyB0aGVtLCB0aG91Z2gKICAgICAqLwogICAgaWYgKGlwdjZIb3N0bmFtZSkgewogICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS5zdWJzdHIoMSwgdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAyKTsKICAgICAgaWYgKHJlc3RbMF0gIT09ICcvJykgewogICAgICAgIHJlc3QgPSAnLycgKyByZXN0OwogICAgICB9CiAgICB9CiAgfQoKICAvKgogICAqIG5vdyByZXN0IGlzIHNldCB0byB0aGUgcG9zdC1ob3N0IHN0dWZmLgogICAqIGNob3Agb2ZmIGFueSBkZWxpbSBjaGFycy4KICAgKi8KICBpZiAoIXVuc2FmZVByb3RvY29sW2xvd2VyUHJvdG9dKSB7CiAgICAvKgogICAgICogRmlyc3QsIG1ha2UgMTAwJSBzdXJlIHRoYXQgYW55ICJhdXRvRXNjYXBlIiBjaGFycyBnZXQKICAgICAqIGVzY2FwZWQsIGV2ZW4gaWYgZW5jb2RlVVJJQ29tcG9uZW50IGRvZXNuJ3QgdGhpbmsgdGhleQogICAgICogbmVlZCB0byBiZS4KICAgICAqLwogICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdXRvRXNjYXBlLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICB2YXIgYWUgPSBhdXRvRXNjYXBlW2ldOwogICAgICBpZiAocmVzdC5pbmRleE9mKGFlKSA9PT0gLTEpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICB2YXIgZXNjID0gZW5jb2RlVVJJQ29tcG9uZW50KGFlKTsKICAgICAgaWYgKGVzYyA9PT0gYWUpIHsKICAgICAgICBlc2MgPSBlc2NhcGUoYWUpOwogICAgICB9CiAgICAgIHJlc3QgPSByZXN0LnNwbGl0KGFlKS5qb2luKGVzYyk7CiAgICB9CiAgfQoKICAvLyBjaG9wIG9mZiBmcm9tIHRoZSB0YWlsIGZpcnN0LgogIHZhciBoYXNoID0gcmVzdC5pbmRleE9mKCcjJyk7CiAgaWYgKGhhc2ggIT09IC0xKSB7CiAgICAvLyBnb3QgYSBmcmFnbWVudCBzdHJpbmcuCiAgICB0aGlzLmhhc2ggPSByZXN0LnN1YnN0cihoYXNoKTsKICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIGhhc2gpOwogIH0KICB2YXIgcW0gPSByZXN0LmluZGV4T2YoJz8nKTsKICBpZiAocW0gIT09IC0xKSB7CiAgICB0aGlzLnNlYXJjaCA9IHJlc3Quc3Vic3RyKHFtKTsKICAgIHRoaXMucXVlcnkgPSByZXN0LnN1YnN0cihxbSArIDEpOwogICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHsKICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5c3RyaW5nLnBhcnNlKHRoaXMucXVlcnkpOwogICAgfQogICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgcW0pOwogIH0gZWxzZSBpZiAocGFyc2VRdWVyeVN0cmluZykgewogICAgLy8gbm8gcXVlcnkgc3RyaW5nLCBidXQgcGFyc2VRdWVyeVN0cmluZyBzdGlsbCByZXF1ZXN0ZWQKICAgIHRoaXMuc2VhcmNoID0gJyc7CiAgICB0aGlzLnF1ZXJ5ID0ge307CiAgfQogIGlmIChyZXN0KSB7CiAgICB0aGlzLnBhdGhuYW1lID0gcmVzdDsKICB9CiAgaWYgKHNsYXNoZWRQcm90b2NvbFtsb3dlclByb3RvXSAmJiB0aGlzLmhvc3RuYW1lICYmICF0aGlzLnBhdGhuYW1lKSB7CiAgICB0aGlzLnBhdGhuYW1lID0gJy8nOwogIH0KCiAgLy8gdG8gc3VwcG9ydCBodHRwLnJlcXVlc3QKICBpZiAodGhpcy5wYXRobmFtZSB8fCB0aGlzLnNlYXJjaCkgewogICAgdmFyIHAgPSB0aGlzLnBhdGhuYW1lIHx8ICcnOwogICAgdmFyIHMgPSB0aGlzLnNlYXJjaCB8fCAnJzsKICAgIHRoaXMucGF0aCA9IHAgKyBzOwogIH0KCiAgLy8gZmluYWxseSwgcmVjb25zdHJ1Y3QgdGhlIGhyZWYgYmFzZWQgb24gd2hhdCBoYXMgYmVlbiB2YWxpZGF0ZWQuCiAgdGhpcy5ocmVmID0gdGhpcy5mb3JtYXQoKTsKICByZXR1cm4gdGhpczsKfTsKCi8vIGZvcm1hdCBhIHBhcnNlZCBvYmplY3QgaW50byBhIHVybCBzdHJpbmcKZnVuY3Rpb24gdXJsRm9ybWF0KG9iaikgewogIC8qCiAgICogZW5zdXJlIGl0J3MgYW4gb2JqZWN0LCBhbmQgbm90IGEgc3RyaW5nIHVybC4KICAgKiBJZiBpdCdzIGFuIG9iaiwgdGhpcyBpcyBhIG5vLW9wLgogICAqIHRoaXMgd2F5LCB5b3UgY2FuIGNhbGwgdXJsX2Zvcm1hdCgpIG9uIHN0cmluZ3MKICAgKiB0byBjbGVhbiB1cCBwb3RlbnRpYWxseSB3b25reSB1cmxzLgogICAqLwogIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykgewogICAgb2JqID0gdXJsUGFyc2Uob2JqKTsKICB9CiAgaWYgKCEob2JqIGluc3RhbmNlb2YgVXJsKSkgewogICAgcmV0dXJuIFVybC5wcm90b3R5cGUuZm9ybWF0LmNhbGwob2JqKTsKICB9CiAgcmV0dXJuIG9iai5mb3JtYXQoKTsKfQpVcmwucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uICgpIHsKICB2YXIgYXV0aCA9IHRoaXMuYXV0aCB8fCAnJzsKICBpZiAoYXV0aCkgewogICAgYXV0aCA9IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKTsKICAgIGF1dGggPSBhdXRoLnJlcGxhY2UoLyUzQS9pLCAnOicpOwogICAgYXV0aCArPSAnQCc7CiAgfQogIHZhciBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2wgfHwgJycsCiAgICBwYXRobmFtZSA9IHRoaXMucGF0aG5hbWUgfHwgJycsCiAgICBoYXNoID0gdGhpcy5oYXNoIHx8ICcnLAogICAgaG9zdCA9IGZhbHNlLAogICAgcXVlcnkgPSAnJzsKICBpZiAodGhpcy5ob3N0KSB7CiAgICBob3N0ID0gYXV0aCArIHRoaXMuaG9zdDsKICB9IGVsc2UgaWYgKHRoaXMuaG9zdG5hbWUpIHsKICAgIGhvc3QgPSBhdXRoICsgKHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpID09PSAtMSA/IHRoaXMuaG9zdG5hbWUgOiAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nKTsKICAgIGlmICh0aGlzLnBvcnQpIHsKICAgICAgaG9zdCArPSAnOicgKyB0aGlzLnBvcnQ7CiAgICB9CiAgfQogIGlmICh0aGlzLnF1ZXJ5ICYmIHR5cGVvZiB0aGlzLnF1ZXJ5ID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyh0aGlzLnF1ZXJ5KS5sZW5ndGgpIHsKICAgIHF1ZXJ5ID0gcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHRoaXMucXVlcnksIHsKICAgICAgYXJyYXlGb3JtYXQ6ICdyZXBlYXQnLAogICAgICBlbmNvZGVWYWx1ZXNPbmx5OiB0cnVlLAogICAgICBhZGRRdWVyeVByZWZpeDogZmFsc2UKICAgIH0pOwogIH0KICB2YXIgc2VhcmNoID0gdGhpcy5zZWFyY2ggfHwgcXVlcnkgJiYgJz8nICsgcXVlcnkgfHwgJyc7CiAgaWYgKHByb3RvY29sICYmIHByb3RvY29sLnN1YnN0cigtMSkgIT09ICc6JykgewogICAgcHJvdG9jb2wgKz0gJzonOwogIH0KCiAgLyoKICAgKiBvbmx5IHRoZSBzbGFzaGVkUHJvdG9jb2xzIGdldCB0aGUgLy8uICBOb3QgbWFpbHRvOiwgeG1wcDosIGV0Yy4KICAgKiB1bmxlc3MgdGhleSBoYWQgdGhlbSB0byBiZWdpbiB3aXRoLgogICAqLwogIGlmICh0aGlzLnNsYXNoZXMgfHwgKCFwcm90b2NvbCB8fCBzbGFzaGVkUHJvdG9jb2xbcHJvdG9jb2xdKSAmJiBob3N0ICE9PSBmYWxzZSkgewogICAgaG9zdCA9ICcvLycgKyAoaG9zdCB8fCAnJyk7CiAgICBpZiAocGF0aG5hbWUgJiYgcGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHsKICAgICAgcGF0aG5hbWUgPSAnLycgKyBwYXRobmFtZTsKICAgIH0KICB9IGVsc2UgaWYgKCFob3N0KSB7CiAgICBob3N0ID0gJyc7CiAgfQogIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSAnIycpIHsKICAgIGhhc2ggPSAnIycgKyBoYXNoOwogIH0KICBpZiAoc2VhcmNoICYmIHNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgewogICAgc2VhcmNoID0gJz8nICsgc2VhcmNoOwogIH0KICBwYXRobmFtZSA9IHBhdGhuYW1lLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKG1hdGNoKSB7CiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KG1hdGNoKTsKICB9KTsKICBzZWFyY2ggPSBzZWFyY2gucmVwbGFjZSgnIycsICclMjMnKTsKICByZXR1cm4gcHJvdG9jb2wgKyBob3N0ICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoOwp9OwpmdW5jdGlvbiB1cmxSZXNvbHZlKHNvdXJjZSwgcmVsYXRpdmUpIHsKICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZShyZWxhdGl2ZSk7Cn0KVXJsLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gKHJlbGF0aXZlKSB7CiAgcmV0dXJuIHRoaXMucmVzb2x2ZU9iamVjdCh1cmxQYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpKS5mb3JtYXQoKTsKfTsKZnVuY3Rpb24gdXJsUmVzb2x2ZU9iamVjdChzb3VyY2UsIHJlbGF0aXZlKSB7CiAgaWYgKCFzb3VyY2UpIHsKICAgIHJldHVybiByZWxhdGl2ZTsKICB9CiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmVPYmplY3QocmVsYXRpdmUpOwp9ClVybC5wcm90b3R5cGUucmVzb2x2ZU9iamVjdCA9IGZ1bmN0aW9uIChyZWxhdGl2ZSkgewogIGlmICh0eXBlb2YgcmVsYXRpdmUgPT09ICdzdHJpbmcnKSB7CiAgICB2YXIgcmVsID0gbmV3IFVybCgpOwogICAgcmVsLnBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSk7CiAgICByZWxhdGl2ZSA9IHJlbDsKICB9CiAgdmFyIHJlc3VsdCA9IG5ldyBVcmwoKTsKICB2YXIgdGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKTsKICBmb3IgKHZhciB0ayA9IDA7IHRrIDwgdGtleXMubGVuZ3RoOyB0aysrKSB7CiAgICB2YXIgdGtleSA9IHRrZXlzW3RrXTsKICAgIHJlc3VsdFt0a2V5XSA9IHRoaXNbdGtleV07CiAgfQoKICAvKgogICAqIGhhc2ggaXMgYWx3YXlzIG92ZXJyaWRkZW4sIG5vIG1hdHRlciB3aGF0LgogICAqIGV2ZW4gaHJlZj0iIiB3aWxsIHJlbW92ZSBpdC4KICAgKi8KICByZXN1bHQuaGFzaCA9IHJlbGF0aXZlLmhhc2g7CgogIC8vIGlmIHRoZSByZWxhdGl2ZSB1cmwgaXMgZW1wdHksIHRoZW4gdGhlcmUncyBub3RoaW5nIGxlZnQgdG8gZG8gaGVyZS4KICBpZiAocmVsYXRpdmUuaHJlZiA9PT0gJycpIHsKICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CgogIC8vIGhyZWZzIGxpa2UgLy9mb28vYmFyIGFsd2F5cyBjdXQgdG8gdGhlIHByb3RvY29sLgogIGlmIChyZWxhdGl2ZS5zbGFzaGVzICYmICFyZWxhdGl2ZS5wcm90b2NvbCkgewogICAgLy8gdGFrZSBldmVyeXRoaW5nIGV4Y2VwdCB0aGUgcHJvdG9jb2wgZnJvbSByZWxhdGl2ZQogICAgdmFyIHJrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpOwogICAgZm9yICh2YXIgcmsgPSAwOyByayA8IHJrZXlzLmxlbmd0aDsgcmsrKykgewogICAgICB2YXIgcmtleSA9IHJrZXlzW3JrXTsKICAgICAgaWYgKHJrZXkgIT09ICdwcm90b2NvbCcpIHsKICAgICAgICByZXN1bHRbcmtleV0gPSByZWxhdGl2ZVtya2V5XTsKICAgICAgfQogICAgfQoKICAgIC8vIHVybFBhcnNlIGFwcGVuZHMgdHJhaWxpbmcgLyB0byB1cmxzIGxpa2UgaHR0cDovL3d3dy5leGFtcGxlLmNvbQogICAgaWYgKHNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdICYmIHJlc3VsdC5ob3N0bmFtZSAmJiAhcmVzdWx0LnBhdGhuYW1lKSB7CiAgICAgIHJlc3VsdC5wYXRobmFtZSA9ICcvJzsKICAgICAgcmVzdWx0LnBhdGggPSByZXN1bHQucGF0aG5hbWU7CiAgICB9CiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTsKICAgIHJldHVybiByZXN1bHQ7CiAgfQogIGlmIChyZWxhdGl2ZS5wcm90b2NvbCAmJiByZWxhdGl2ZS5wcm90b2NvbCAhPT0gcmVzdWx0LnByb3RvY29sKSB7CiAgICAvKgogICAgICogaWYgaXQncyBhIGtub3duIHVybCBwcm90b2NvbCwgdGhlbiBjaGFuZ2luZwogICAgICogdGhlIHByb3RvY29sIGRvZXMgd2VpcmQgdGhpbmdzCiAgICAgKiBmaXJzdCwgaWYgaXQncyBub3QgZmlsZTosIHRoZW4gd2UgTVVTVCBoYXZlIGEgaG9zdCwKICAgICAqIGFuZCBpZiB0aGVyZSB3YXMgYSBwYXRoCiAgICAgKiB0byBiZWdpbiB3aXRoLCB0aGVuIHdlIE1VU1QgaGF2ZSBhIHBhdGguCiAgICAgKiBpZiBpdCBpcyBmaWxlOiwgdGhlbiB0aGUgaG9zdCBpcyBkcm9wcGVkLAogICAgICogYmVjYXVzZSB0aGF0J3Mga25vd24gdG8gYmUgaG9zdGxlc3MuCiAgICAgKiBhbnl0aGluZyBlbHNlIGlzIGFzc3VtZWQgdG8gYmUgYWJzb2x1dGUuCiAgICAgKi8KICAgIGlmICghc2xhc2hlZFByb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkgewogICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJlbGF0aXZlKTsKICAgICAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7CiAgICAgICAgdmFyIGsgPSBrZXlzW3ZdOwogICAgICAgIHJlc3VsdFtrXSA9IHJlbGF0aXZlW2tdOwogICAgICB9CiAgICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogICAgcmVzdWx0LnByb3RvY29sID0gcmVsYXRpdmUucHJvdG9jb2w7CiAgICBpZiAoIXJlbGF0aXZlLmhvc3QgJiYgIWhvc3RsZXNzUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7CiAgICAgIHZhciByZWxQYXRoID0gKHJlbGF0aXZlLnBhdGhuYW1lIHx8ICcnKS5zcGxpdCgnLycpOwogICAgICB3aGlsZSAocmVsUGF0aC5sZW5ndGggJiYgIShyZWxhdGl2ZS5ob3N0ID0gcmVsUGF0aC5zaGlmdCgpKSkge30KICAgICAgaWYgKCFyZWxhdGl2ZS5ob3N0KSB7CiAgICAgICAgcmVsYXRpdmUuaG9zdCA9ICcnOwogICAgICB9CiAgICAgIGlmICghcmVsYXRpdmUuaG9zdG5hbWUpIHsKICAgICAgICByZWxhdGl2ZS5ob3N0bmFtZSA9ICcnOwogICAgICB9CiAgICAgIGlmIChyZWxQYXRoWzBdICE9PSAnJykgewogICAgICAgIHJlbFBhdGgudW5zaGlmdCgnJyk7CiAgICAgIH0KICAgICAgaWYgKHJlbFBhdGgubGVuZ3RoIDwgMikgewogICAgICAgIHJlbFBhdGgudW5zaGlmdCgnJyk7CiAgICAgIH0KICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsUGF0aC5qb2luKCcvJyk7CiAgICB9IGVsc2UgewogICAgICByZXN1bHQucGF0aG5hbWUgPSByZWxhdGl2ZS5wYXRobmFtZTsKICAgIH0KICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7CiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTsKICAgIHJlc3VsdC5ob3N0ID0gcmVsYXRpdmUuaG9zdCB8fCAnJzsKICAgIHJlc3VsdC5hdXRoID0gcmVsYXRpdmUuYXV0aDsKICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlbGF0aXZlLmhvc3RuYW1lIHx8IHJlbGF0aXZlLmhvc3Q7CiAgICByZXN1bHQucG9ydCA9IHJlbGF0aXZlLnBvcnQ7CiAgICAvLyB0byBzdXBwb3J0IGh0dHAucmVxdWVzdAogICAgaWYgKHJlc3VsdC5wYXRobmFtZSB8fCByZXN1bHQuc2VhcmNoKSB7CiAgICAgIHZhciBwID0gcmVzdWx0LnBhdGhuYW1lIHx8ICcnOwogICAgICB2YXIgcyA9IHJlc3VsdC5zZWFyY2ggfHwgJyc7CiAgICAgIHJlc3VsdC5wYXRoID0gcCArIHM7CiAgICB9CiAgICByZXN1bHQuc2xhc2hlcyA9IHJlc3VsdC5zbGFzaGVzIHx8IHJlbGF0aXZlLnNsYXNoZXM7CiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTsKICAgIHJldHVybiByZXN1bHQ7CiAgfQogIHZhciBpc1NvdXJjZUFicyA9IHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycsCiAgICBpc1JlbEFicyA9IHJlbGF0aXZlLmhvc3QgfHwgcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycsCiAgICBtdXN0RW5kQWJzID0gaXNSZWxBYnMgfHwgaXNTb3VyY2VBYnMgfHwgcmVzdWx0Lmhvc3QgJiYgcmVsYXRpdmUucGF0aG5hbWUsCiAgICByZW1vdmVBbGxEb3RzID0gbXVzdEVuZEFicywKICAgIHNyY1BhdGggPSByZXN1bHQucGF0aG5hbWUgJiYgcmVzdWx0LnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sCiAgICByZWxQYXRoID0gcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuc3BsaXQoJy8nKSB8fCBbXSwKICAgIHBzeWNob3RpYyA9IHJlc3VsdC5wcm90b2NvbCAmJiAhc2xhc2hlZFByb3RvY29sW3Jlc3VsdC5wcm90b2NvbF07CgogIC8qCiAgICogaWYgdGhlIHVybCBpcyBhIG5vbi1zbGFzaGVkIHVybCwgdGhlbiByZWxhdGl2ZQogICAqIGxpbmtzIGxpa2UgLi4vLi4gc2hvdWxkIGJlIGFibGUKICAgKiB0byBjcmF3bCB1cCB0byB0aGUgaG9zdG5hbWUsIGFzIHdlbGwuICBUaGlzIGlzIHN0cmFuZ2UuCiAgICogcmVzdWx0LnByb3RvY29sIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IG5vdy4KICAgKiBMYXRlciBvbiwgcHV0IHRoZSBmaXJzdCBwYXRoIHBhcnQgaW50byB0aGUgaG9zdCBmaWVsZC4KICAgKi8KICBpZiAocHN5Y2hvdGljKSB7CiAgICByZXN1bHQuaG9zdG5hbWUgPSAnJzsKICAgIHJlc3VsdC5wb3J0ID0gbnVsbDsKICAgIGlmIChyZXN1bHQuaG9zdCkgewogICAgICBpZiAoc3JjUGF0aFswXSA9PT0gJycpIHsKICAgICAgICBzcmNQYXRoWzBdID0gcmVzdWx0Lmhvc3Q7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3JjUGF0aC51bnNoaWZ0KHJlc3VsdC5ob3N0KTsKICAgICAgfQogICAgfQogICAgcmVzdWx0Lmhvc3QgPSAnJzsKICAgIGlmIChyZWxhdGl2ZS5wcm90b2NvbCkgewogICAgICByZWxhdGl2ZS5ob3N0bmFtZSA9IG51bGw7CiAgICAgIHJlbGF0aXZlLnBvcnQgPSBudWxsOwogICAgICBpZiAocmVsYXRpdmUuaG9zdCkgewogICAgICAgIGlmIChyZWxQYXRoWzBdID09PSAnJykgewogICAgICAgICAgcmVsUGF0aFswXSA9IHJlbGF0aXZlLmhvc3Q7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlbFBhdGgudW5zaGlmdChyZWxhdGl2ZS5ob3N0KTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmVsYXRpdmUuaG9zdCA9IG51bGw7CiAgICB9CiAgICBtdXN0RW5kQWJzID0gbXVzdEVuZEFicyAmJiAocmVsUGF0aFswXSA9PT0gJycgfHwgc3JjUGF0aFswXSA9PT0gJycpOwogIH0KICBpZiAoaXNSZWxBYnMpIHsKICAgIC8vIGl0J3MgYWJzb2x1dGUuCiAgICByZXN1bHQuaG9zdCA9IHJlbGF0aXZlLmhvc3QgfHwgcmVsYXRpdmUuaG9zdCA9PT0gJycgPyByZWxhdGl2ZS5ob3N0IDogcmVzdWx0Lmhvc3Q7CiAgICByZXN1bHQuaG9zdG5hbWUgPSByZWxhdGl2ZS5ob3N0bmFtZSB8fCByZWxhdGl2ZS5ob3N0bmFtZSA9PT0gJycgPyByZWxhdGl2ZS5ob3N0bmFtZSA6IHJlc3VsdC5ob3N0bmFtZTsKICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7CiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTsKICAgIHNyY1BhdGggPSByZWxQYXRoOwogICAgLy8gZmFsbCB0aHJvdWdoIHRvIHRoZSBkb3QtaGFuZGxpbmcgYmVsb3cuCiAgfSBlbHNlIGlmIChyZWxQYXRoLmxlbmd0aCkgewogICAgLyoKICAgICAqIGl0J3MgcmVsYXRpdmUKICAgICAqIHRocm93IGF3YXkgdGhlIGV4aXN0aW5nIGZpbGUsIGFuZCB0YWtlIHRoZSBuZXcgcGF0aCBpbnN0ZWFkLgogICAgICovCiAgICBpZiAoIXNyY1BhdGgpIHsKICAgICAgc3JjUGF0aCA9IFtdOwogICAgfQogICAgc3JjUGF0aC5wb3AoKTsKICAgIHNyY1BhdGggPSBzcmNQYXRoLmNvbmNhdChyZWxQYXRoKTsKICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7CiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTsKICB9IGVsc2UgaWYgKHJlbGF0aXZlLnNlYXJjaCAhPSBudWxsKSB7CiAgICAvKgogICAgICoganVzdCBwdWxsIG91dCB0aGUgc2VhcmNoLgogICAgICogbGlrZSBocmVmPSc/Zm9vJy4KICAgICAqIFB1dCB0aGlzIGFmdGVyIHRoZSBvdGhlciB0d28gY2FzZXMgYmVjYXVzZSBpdCBzaW1wbGlmaWVzIHRoZSBib29sZWFucwogICAgICovCiAgICBpZiAocHN5Y2hvdGljKSB7CiAgICAgIHJlc3VsdC5ob3N0ID0gc3JjUGF0aC5zaGlmdCgpOwogICAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdDsKICAgICAgLyoKICAgICAgICogb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3QKICAgICAgICogdGhpcyBlc3BlY2lhbGx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZQogICAgICAgKiB1cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJykKICAgICAgICovCiAgICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/IHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTsKICAgICAgaWYgKGF1dGhJbkhvc3QpIHsKICAgICAgICByZXN1bHQuYXV0aCA9IGF1dGhJbkhvc3Quc2hpZnQoKTsKICAgICAgICByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7CiAgICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWU7CiAgICAgIH0KICAgIH0KICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7CiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTsKICAgIC8vIHRvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0CiAgICBpZiAocmVzdWx0LnBhdGhuYW1lICE9PSBudWxsIHx8IHJlc3VsdC5zZWFyY2ggIT09IG51bGwpIHsKICAgICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICsgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpOwogICAgfQogICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7CiAgICAvKgogICAgICogbm8gcGF0aCBhdCBhbGwuICBlYXN5LgogICAgICogd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoZSBvdGhlciBzdHVmZiBhYm92ZS4KICAgICAqLwogICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDsKICAgIC8vIHRvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0CiAgICBpZiAocmVzdWx0LnNlYXJjaCkgewogICAgICByZXN1bHQucGF0aCA9ICcvJyArIHJlc3VsdC5zZWFyY2g7CiAgICB9IGVsc2UgewogICAgICByZXN1bHQucGF0aCA9IG51bGw7CiAgICB9CiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTsKICAgIHJldHVybiByZXN1bHQ7CiAgfQoKICAvKgogICAqIGlmIGEgdXJsIEVORHMgaW4gLiBvciAuLiwgdGhlbiBpdCBtdXN0IGdldCBhIHRyYWlsaW5nIHNsYXNoLgogICAqIGhvd2V2ZXIsIGlmIGl0IGVuZHMgaW4gYW55dGhpbmcgZWxzZSBub24tc2xhc2h5LAogICAqIHRoZW4gaXQgbXVzdCBOT1QgZ2V0IGEgdHJhaWxpbmcgc2xhc2guCiAgICovCiAgdmFyIGxhc3QgPSBzcmNQYXRoLnNsaWNlKC0xKVswXTsKICB2YXIgaGFzVHJhaWxpbmdTbGFzaCA9IChyZXN1bHQuaG9zdCB8fCByZWxhdGl2ZS5ob3N0IHx8IHNyY1BhdGgubGVuZ3RoID4gMSkgJiYgKGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nKSB8fCBsYXN0ID09PSAnJzsKCiAgLyoKICAgKiBzdHJpcCBzaW5nbGUgZG90cywgcmVzb2x2ZSBkb3VibGUgZG90cyB0byBwYXJlbnQgZGlyCiAgICogaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDAKICAgKi8KICB2YXIgdXAgPSAwOwogIGZvciAodmFyIGkgPSBzcmNQYXRoLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHsKICAgIGxhc3QgPSBzcmNQYXRoW2ldOwogICAgaWYgKGxhc3QgPT09ICcuJykgewogICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTsKICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykgewogICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTsKICAgICAgdXArKzsKICAgIH0gZWxzZSBpZiAodXApIHsKICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7CiAgICAgIHVwLS07CiAgICB9CiAgfQoKICAvLyBpZiB0aGUgcGF0aCBpcyBhbGxvd2VkIHRvIGdvIGFib3ZlIHRoZSByb290LCByZXN0b3JlIGxlYWRpbmcgLi5zCiAgaWYgKCFtdXN0RW5kQWJzICYmICFyZW1vdmVBbGxEb3RzKSB7CiAgICBmb3IgKDsgdXAtLTsgdXApIHsKICAgICAgc3JjUGF0aC51bnNoaWZ0KCcuLicpOwogICAgfQogIH0KICBpZiAobXVzdEVuZEFicyAmJiBzcmNQYXRoWzBdICE9PSAnJyAmJiAoIXNyY1BhdGhbMF0gfHwgc3JjUGF0aFswXS5jaGFyQXQoMCkgIT09ICcvJykpIHsKICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7CiAgfQogIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHNyY1BhdGguam9pbignLycpLnN1YnN0cigtMSkgIT09ICcvJykgewogICAgc3JjUGF0aC5wdXNoKCcnKTsKICB9CiAgdmFyIGlzQWJzb2x1dGUgPSBzcmNQYXRoWzBdID09PSAnJyB8fCBzcmNQYXRoWzBdICYmIHNyY1BhdGhbMF0uY2hhckF0KDApID09PSAnLyc7CgogIC8vIHB1dCB0aGUgaG9zdCBiYWNrCiAgaWYgKHBzeWNob3RpYykgewogICAgcmVzdWx0Lmhvc3RuYW1lID0gaXNBYnNvbHV0ZSA/ICcnIDogc3JjUGF0aC5sZW5ndGggPyBzcmNQYXRoLnNoaWZ0KCkgOiAnJzsKICAgIHJlc3VsdC5ob3N0ID0gcmVzdWx0Lmhvc3RuYW1lOwogICAgLyoKICAgICAqIG9jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0CiAgICAgKiB0aGlzIGVzcGVjaWFsbHkgaGFwcGVucyBpbiBjYXNlcyBsaWtlCiAgICAgKiB1cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJykKICAgICAqLwogICAgdmFyIGF1dGhJbkhvc3QgPSByZXN1bHQuaG9zdCAmJiByZXN1bHQuaG9zdC5pbmRleE9mKCdAJykgPiAwID8gcmVzdWx0Lmhvc3Quc3BsaXQoJ0AnKSA6IGZhbHNlOwogICAgaWYgKGF1dGhJbkhvc3QpIHsKICAgICAgcmVzdWx0LmF1dGggPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7CiAgICAgIHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTsKICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWU7CiAgICB9CiAgfQogIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzIHx8IHJlc3VsdC5ob3N0ICYmIHNyY1BhdGgubGVuZ3RoOwogIGlmIChtdXN0RW5kQWJzICYmICFpc0Fic29sdXRlKSB7CiAgICBzcmNQYXRoLnVuc2hpZnQoJycpOwogIH0KICBpZiAoc3JjUGF0aC5sZW5ndGggPiAwKSB7CiAgICByZXN1bHQucGF0aG5hbWUgPSBzcmNQYXRoLmpvaW4oJy8nKTsKICB9IGVsc2UgewogICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDsKICAgIHJlc3VsdC5wYXRoID0gbnVsbDsKICB9CgogIC8vIHRvIHN1cHBvcnQgcmVxdWVzdC5odHRwCiAgaWYgKHJlc3VsdC5wYXRobmFtZSAhPT0gbnVsbCB8fCByZXN1bHQuc2VhcmNoICE9PSBudWxsKSB7CiAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgKyAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7CiAgfQogIHJlc3VsdC5hdXRoID0gcmVsYXRpdmUuYXV0aCB8fCByZXN1bHQuYXV0aDsKICByZXN1bHQuc2xhc2hlcyA9IHJlc3VsdC5zbGFzaGVzIHx8IHJlbGF0aXZlLnNsYXNoZXM7CiAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7CiAgcmV0dXJuIHJlc3VsdDsKfTsKVXJsLnByb3RvdHlwZS5wYXJzZUhvc3QgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGhvc3QgPSB0aGlzLmhvc3Q7CiAgdmFyIHBvcnQgPSBwb3J0UGF0dGVybi5leGVjKGhvc3QpOwogIGlmIChwb3J0KSB7CiAgICBwb3J0ID0gcG9ydFswXTsKICAgIGlmIChwb3J0ICE9PSAnOicpIHsKICAgICAgdGhpcy5wb3J0ID0gcG9ydC5zdWJzdHIoMSk7CiAgICB9CiAgICBob3N0ID0gaG9zdC5zdWJzdHIoMCwgaG9zdC5sZW5ndGggLSBwb3J0Lmxlbmd0aCk7CiAgfQogIGlmIChob3N0KSB7CiAgICB0aGlzLmhvc3RuYW1lID0gaG9zdDsKICB9Cn07CmV4cG9ydHMucGFyc2UgPSB1cmxQYXJzZTsKZXhwb3J0cy5yZXNvbHZlID0gdXJsUmVzb2x2ZTsKZXhwb3J0cy5yZXNvbHZlT2JqZWN0ID0gdXJsUmVzb2x2ZU9iamVjdDsKZXhwb3J0cy5mb3JtYXQgPSB1cmxGb3JtYXQ7CmV4cG9ydHMuVXJsID0gVXJsOw=="},null]}