{"remainingRequest":"/Users/adamliu/vant/node_modules/babel-loader/lib/index.js!/Users/adamliu/vant/src/uploader/index.js","dependencies":[{"path":"/Users/adamliu/vant/src/uploader/index.js","mtime":1694509705062},{"path":"/Users/adamliu/vant/babel.config.js","mtime":1694509704583},{"path":"/Users/adamliu/vant/node_modules/cache-loader/dist/cjs.js","mtime":1694509793427},{"path":"/Users/adamliu/vant/node_modules/babel-loader/lib/index.js","mtime":1694509794381}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}