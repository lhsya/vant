{"remainingRequest":"/Users/adamliu/vant/node_modules/babel-loader/lib/index.js!/Users/adamliu/vant/src/sku/Sku.js","dependencies":[{"path":"/Users/adamliu/vant/src/sku/Sku.js","mtime":1694509705027},{"path":"/Users/adamliu/vant/babel.config.js","mtime":1694509704583},{"path":"/Users/adamliu/vant/node_modules/cache-loader/dist/cjs.js","mtime":1694509793427},{"path":"/Users/adamliu/vant/node_modules/babel-loader/lib/index.js","mtime":1694509794381}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMiOwppbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7CmltcG9ydCBQb3B1cCBmcm9tICcuLi9wb3B1cCc7CmltcG9ydCBUb2FzdCBmcm9tICcuLi90b2FzdCc7CmltcG9ydCBJbWFnZVByZXZpZXcgZnJvbSAnLi4vaW1hZ2UtcHJldmlldyc7CmltcG9ydCBTa3VIZWFkZXIgZnJvbSAnLi9jb21wb25lbnRzL1NrdUhlYWRlcic7CmltcG9ydCBTa3VIZWFkZXJJdGVtIGZyb20gJy4vY29tcG9uZW50cy9Ta3VIZWFkZXJJdGVtJzsKaW1wb3J0IFNrdVJvdyBmcm9tICcuL2NvbXBvbmVudHMvU2t1Um93JzsKaW1wb3J0IFNrdVJvd0l0ZW0gZnJvbSAnLi9jb21wb25lbnRzL1NrdVJvd0l0ZW0nOwppbXBvcnQgU2t1Um93UHJvcEl0ZW0gZnJvbSAnLi9jb21wb25lbnRzL1NrdVJvd1Byb3BJdGVtJzsKaW1wb3J0IFNrdVN0ZXBwZXIgZnJvbSAnLi9jb21wb25lbnRzL1NrdVN0ZXBwZXInOwppbXBvcnQgU2t1TWVzc2FnZXMgZnJvbSAnLi9jb21wb25lbnRzL1NrdU1lc3NhZ2VzJzsKaW1wb3J0IFNrdUFjdGlvbnMgZnJvbSAnLi9jb21wb25lbnRzL1NrdUFjdGlvbnMnOwppbXBvcnQgeyBjcmVhdGVOYW1lc3BhY2UsIGlzRW1wdHkgfSBmcm9tICcuLi91dGlscyc7CmltcG9ydCB7IGlzQWxsU2VsZWN0ZWQsIGlzU2t1Q2hvb3NhYmxlLCBnZXRTa3VDb21iLCBnZXRTZWxlY3RlZFNrdVZhbHVlcywgZ2V0U2VsZWN0ZWRQcm9wVmFsdWVzLCBnZXRTZWxlY3RlZFByb3BlcnRpZXMgfSBmcm9tICcuL3V0aWxzL3NrdS1oZWxwZXInOwppbXBvcnQgeyBMSU1JVF9UWVBFLCBVTlNFTEVDVEVEX1NLVV9WQUxVRV9JRCB9IGZyb20gJy4vY29uc3RhbnRzJzsKdmFyIG5hbWVzcGFjZSA9IGNyZWF0ZU5hbWVzcGFjZSgnc2t1Jyk7CnZhciBjcmVhdGVDb21wb25lbnQgPSBuYW1lc3BhY2VbMF0sCiAgYmVtID0gbmFtZXNwYWNlWzFdLAogIHQgPSBuYW1lc3BhY2VbMl07CnZhciBRVU9UQV9MSU1JVCA9IExJTUlUX1RZUEUuUVVPVEFfTElNSVQ7CmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbXBvbmVudCh7CiAgcHJvcHM6IHsKICAgIHNrdTogT2JqZWN0LAogICAgZ29vZHM6IE9iamVjdCwKICAgIHZhbHVlOiBCb29sZWFuLAogICAgYnV5VGV4dDogU3RyaW5nLAogICAgZ29vZHNJZDogW051bWJlciwgU3RyaW5nXSwKICAgIHByaWNlVGFnOiBTdHJpbmcsCiAgICBsYXp5TG9hZDogQm9vbGVhbiwKICAgIGhpZGVTdG9jazogQm9vbGVhbiwKICAgIHByb3BlcnRpZXM6IEFycmF5LAogICAgYWRkQ2FydFRleHQ6IFN0cmluZywKICAgIHN0ZXBwZXJUaXRsZTogU3RyaW5nLAogICAgZ2V0Q29udGFpbmVyOiBbU3RyaW5nLCBGdW5jdGlvbl0sCiAgICBoaWRlUXVvdGFUZXh0OiBCb29sZWFuLAogICAgaGlkZVNlbGVjdGVkVGV4dDogQm9vbGVhbiwKICAgIHJlc2V0U3RlcHBlck9uSGlkZTogQm9vbGVhbiwKICAgIGN1c3RvbVNrdVZhbGlkYXRvcjogRnVuY3Rpb24sCiAgICBkaXNhYmxlU3RlcHBlcklucHV0OiBCb29sZWFuLAogICAgcmVzZXRTZWxlY3RlZFNrdU9uSGlkZTogQm9vbGVhbiwKICAgIHF1b3RhOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogMAogICAgfSwKICAgIHF1b3RhVXNlZDogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDAKICAgIH0sCiAgICBzdGFydFNhbGVOdW06IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiAxCiAgICB9LAogICAgaW5pdGlhbFNrdTogewogICAgICB0eXBlOiBPYmplY3QsCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiB7fTsKICAgICAgfQogICAgfSwKICAgIHN0b2NrVGhyZXNob2xkOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogNTAKICAgIH0sCiAgICBzaG93U29sZG91dFNrdTogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiB0cnVlCiAgICB9LAogICAgc2hvd0FkZENhcnRCdG46IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogdHJ1ZQogICAgfSwKICAgIGRpc2FibGVTb2xkb3V0U2t1OiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IHRydWUKICAgIH0sCiAgICBjdXN0b21TdGVwcGVyQ29uZmlnOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIHt9OwogICAgICB9CiAgICB9LAogICAgc2hvd0hlYWRlckltYWdlOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IHRydWUKICAgIH0sCiAgICBwcmV2aWV3T25DbGlja0ltYWdlOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IHRydWUKICAgIH0sCiAgICBzYWZlQXJlYUluc2V0Qm90dG9tOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IHRydWUKICAgIH0sCiAgICBjbG9zZU9uQ2xpY2tPdmVybGF5OiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IHRydWUKICAgIH0sCiAgICBib2R5T2Zmc2V0VG9wOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogMjAwCiAgICB9LAogICAgbWVzc2FnZUNvbmZpZzogewogICAgICB0eXBlOiBPYmplY3QsCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBpbml0aWFsTWVzc2FnZXM6IHt9LAogICAgICAgICAgcGxhY2Vob2xkZXJNYXA6IHt9LAogICAgICAgICAgdXBsb2FkSW1nOiBmdW5jdGlvbiB1cGxvYWRJbWcoKSB7CiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsKICAgICAgICAgIH0sCiAgICAgICAgICB1cGxvYWRNYXhTaXplOiA1CiAgICAgICAgfTsKICAgICAgfQogICAgfQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHNlbGVjdGVkU2t1OiB7fSwKICAgICAgc2VsZWN0ZWRQcm9wOiB7fSwKICAgICAgc2VsZWN0ZWROdW06IDEsCiAgICAgIHNob3c6IHRoaXMudmFsdWUKICAgIH07CiAgfSwKICB3YXRjaDogewogICAgc2hvdzogZnVuY3Rpb24gc2hvdyh2YWwpIHsKICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCB2YWwpOwogICAgICBpZiAoIXZhbCkgewogICAgICAgIHRoaXMuJGVtaXQoJ3NrdS1jbG9zZScsIHsKICAgICAgICAgIHNlbGVjdGVkU2t1VmFsdWVzOiB0aGlzLnNlbGVjdGVkU2t1VmFsdWVzLAogICAgICAgICAgc2VsZWN0ZWROdW06IHRoaXMuc2VsZWN0ZWROdW0sCiAgICAgICAgICBzZWxlY3RlZFNrdUNvbWI6IHRoaXMuc2VsZWN0ZWRTa3VDb21iCiAgICAgICAgfSk7CiAgICAgICAgaWYgKHRoaXMucmVzZXRTdGVwcGVyT25IaWRlKSB7CiAgICAgICAgICB0aGlzLnJlc2V0U3RlcHBlcigpOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5yZXNldFNlbGVjdGVkU2t1T25IaWRlKSB7CiAgICAgICAgICB0aGlzLnJlc2V0U2VsZWN0ZWRTa3UoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUodmFsKSB7CiAgICAgIHRoaXMuc2hvdyA9IHZhbDsKICAgIH0sCiAgICBza3VUcmVlOiAncmVzZXRTZWxlY3RlZFNrdScsCiAgICBpbml0aWFsU2t1OiBmdW5jdGlvbiBpbml0aWFsU2t1KCkgewogICAgICB0aGlzLnJlc2V0U3RlcHBlcigpOwogICAgICB0aGlzLnJlc2V0U2VsZWN0ZWRTa3UoKTsKICAgIH0KICB9LAogIGNvbXB1dGVkOiB7CiAgICBza3VHcm91cENsYXNzOiBmdW5jdGlvbiBza3VHcm91cENsYXNzKCkgewogICAgICByZXR1cm4gWyd2YW4tc2t1LWdyb3VwLWNvbnRhaW5lcicsIHsKICAgICAgICAndmFuLXNrdS1ncm91cC1jb250YWluZXItLWhpZGUtc29sZG91dCc6ICF0aGlzLnNob3dTb2xkb3V0U2t1CiAgICAgIH1dOwogICAgfSwKICAgIGJvZHlTdHlsZTogZnVuY3Rpb24gYm9keVN0eWxlKCkgewogICAgICBpZiAodGhpcy4kaXNTZXJ2ZXIpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdmFyIG1heEhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIHRoaXMuYm9keU9mZnNldFRvcDsKICAgICAgcmV0dXJuIHsKICAgICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodCArICdweCcKICAgICAgfTsKICAgIH0sCiAgICBpc1NrdUNvbWJTZWxlY3RlZDogZnVuY3Rpb24gaXNTa3VDb21iU2VsZWN0ZWQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIC8vIFNLVSDmnKrpgInlrowKICAgICAgaWYgKHRoaXMuaGFzU2t1ICYmICFpc0FsbFNlbGVjdGVkKHRoaXMuc2t1VHJlZSwgdGhpcy5zZWxlY3RlZFNrdSkpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIC8vIOWxnuaAp+acquWFqOmAiQogICAgICByZXR1cm4gIXRoaXMucHJvcExpc3QuZmlsdGVyKGZ1bmN0aW9uIChpKSB7CiAgICAgICAgcmV0dXJuIGkuaXNfbmVjZXNzYXJ5ICE9PSBmYWxzZTsKICAgICAgfSkuc29tZShmdW5jdGlvbiAoaSkgewogICAgICAgIHJldHVybiAoX3RoaXMuc2VsZWN0ZWRQcm9wW2kua19pZF0gfHwgW10pLmxlbmd0aCA9PT0gMDsKICAgICAgfSk7CiAgICB9LAogICAgaXNTa3VFbXB0eTogZnVuY3Rpb24gaXNTa3VFbXB0eSgpIHsKICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuc2t1KS5sZW5ndGggPT09IDA7CiAgICB9LAogICAgaGFzU2t1OiBmdW5jdGlvbiBoYXNTa3UoKSB7CiAgICAgIHJldHVybiAhdGhpcy5za3Uubm9uZV9za3U7CiAgICB9LAogICAgaGFzU2t1T3JBdHRyOiBmdW5jdGlvbiBoYXNTa3VPckF0dHIoKSB7CiAgICAgIHJldHVybiB0aGlzLmhhc1NrdSB8fCB0aGlzLnByb3BMaXN0Lmxlbmd0aCA+IDA7CiAgICB9LAogICAgc2VsZWN0ZWRTa3VDb21iOiBmdW5jdGlvbiBzZWxlY3RlZFNrdUNvbWIoKSB7CiAgICAgIHZhciBza3VDb21iID0gbnVsbDsKICAgICAgaWYgKHRoaXMuaXNTa3VDb21iU2VsZWN0ZWQpIHsKICAgICAgICBpZiAodGhpcy5oYXNTa3UpIHsKICAgICAgICAgIHNrdUNvbWIgPSBnZXRTa3VDb21iKHRoaXMuc2t1TGlzdCwgdGhpcy5zZWxlY3RlZFNrdSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHNrdUNvbWIgPSB7CiAgICAgICAgICAgIGlkOiB0aGlzLnNrdS5jb2xsZWN0aW9uX2lkLAogICAgICAgICAgICBwcmljZTogTWF0aC5yb3VuZCh0aGlzLnNrdS5wcmljZSAqIDEwMCksCiAgICAgICAgICAgIHN0b2NrX251bTogdGhpcy5za3Uuc3RvY2tfbnVtCiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICBpZiAoc2t1Q29tYikgewogICAgICAgICAgc2t1Q29tYi5wcm9wZXJ0aWVzID0gZ2V0U2VsZWN0ZWRQcm9wZXJ0aWVzKHRoaXMucHJvcExpc3QsIHRoaXMuc2VsZWN0ZWRQcm9wKTsKICAgICAgICAgIHNrdUNvbWIucHJvcGVydHlfcHJpY2UgPSB0aGlzLnNlbGVjdGVkUHJvcFZhbHVlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3VyKSB7CiAgICAgICAgICAgIHJldHVybiBhY2MgKyAoY3VyLnByaWNlIHx8IDApOwogICAgICAgICAgfSwgMCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBza3VDb21iOwogICAgfSwKICAgIHNlbGVjdGVkU2t1VmFsdWVzOiBmdW5jdGlvbiBzZWxlY3RlZFNrdVZhbHVlcygpIHsKICAgICAgcmV0dXJuIGdldFNlbGVjdGVkU2t1VmFsdWVzKHRoaXMuc2t1VHJlZSwgdGhpcy5zZWxlY3RlZFNrdSk7CiAgICB9LAogICAgc2VsZWN0ZWRQcm9wVmFsdWVzOiBmdW5jdGlvbiBzZWxlY3RlZFByb3BWYWx1ZXMoKSB7CiAgICAgIHJldHVybiBnZXRTZWxlY3RlZFByb3BWYWx1ZXModGhpcy5wcm9wTGlzdCwgdGhpcy5zZWxlY3RlZFByb3ApOwogICAgfSwKICAgIHByaWNlOiBmdW5jdGlvbiBwcmljZSgpIHsKICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRTa3VDb21iKSB7CiAgICAgICAgcmV0dXJuICgodGhpcy5zZWxlY3RlZFNrdUNvbWIucHJpY2UgKyB0aGlzLnNlbGVjdGVkU2t1Q29tYi5wcm9wZXJ0eV9wcmljZSkgLyAxMDApLnRvRml4ZWQoMik7CiAgICAgIH0KICAgICAgLy8gc2t1LnByaWNl5piv5LiA5Liq5qC85byP5YyW5aW955qE5Lu35qC85Yy66Ze0CiAgICAgIHJldHVybiB0aGlzLnNrdS5wcmljZTsKICAgIH0sCiAgICBvcmlnaW5QcmljZTogZnVuY3Rpb24gb3JpZ2luUHJpY2UoKSB7CiAgICAgIGlmICh0aGlzLnNlbGVjdGVkU2t1Q29tYiAmJiB0aGlzLnNlbGVjdGVkU2t1Q29tYi5vcmlnaW5fcHJpY2UpIHsKICAgICAgICByZXR1cm4gKCh0aGlzLnNlbGVjdGVkU2t1Q29tYi5vcmlnaW5fcHJpY2UgKyB0aGlzLnNlbGVjdGVkU2t1Q29tYi5wcm9wZXJ0eV9wcmljZSkgLyAxMDApLnRvRml4ZWQoMik7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMuc2t1Lm9yaWdpbl9wcmljZTsKICAgIH0sCiAgICBza3VUcmVlOiBmdW5jdGlvbiBza3VUcmVlKCkgewogICAgICByZXR1cm4gdGhpcy5za3UudHJlZSB8fCBbXTsKICAgIH0sCiAgICBza3VMaXN0OiBmdW5jdGlvbiBza3VMaXN0KCkgewogICAgICByZXR1cm4gdGhpcy5za3UubGlzdCB8fCBbXTsKICAgIH0sCiAgICBwcm9wTGlzdDogZnVuY3Rpb24gcHJvcExpc3QoKSB7CiAgICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXMgfHwgW107CiAgICB9LAogICAgaW1hZ2VMaXN0OiBmdW5jdGlvbiBpbWFnZUxpc3QoKSB7CiAgICAgIHZhciBpbWFnZUxpc3QgPSBbdGhpcy5nb29kcy5waWN0dXJlXTsKICAgICAgaWYgKHRoaXMuc2t1VHJlZS5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy5za3VUcmVlLmZvckVhY2goZnVuY3Rpb24gKHRyZWVJdGVtKSB7CiAgICAgICAgICBpZiAoIXRyZWVJdGVtLnYpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgdHJlZUl0ZW0udi5mb3JFYWNoKGZ1bmN0aW9uICh2SXRlbSkgewogICAgICAgICAgICB2YXIgaW1nVXJsID0gdkl0ZW0ucHJldmlld0ltZ1VybCB8fCB2SXRlbS5pbWdVcmwgfHwgdkl0ZW0uaW1nX3VybDsKICAgICAgICAgICAgaWYgKGltZ1VybCAmJiBpbWFnZUxpc3QuaW5kZXhPZihpbWdVcmwpID09PSAtMSkgewogICAgICAgICAgICAgIGltYWdlTGlzdC5wdXNoKGltZ1VybCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CiAgICAgIHJldHVybiBpbWFnZUxpc3Q7CiAgICB9LAogICAgc3RvY2s6IGZ1bmN0aW9uIHN0b2NrKCkgewogICAgICB2YXIgc3RvY2tOdW0gPSB0aGlzLmN1c3RvbVN0ZXBwZXJDb25maWcuc3RvY2tOdW07CiAgICAgIGlmIChzdG9ja051bSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIHN0b2NrTnVtOwogICAgICB9CiAgICAgIGlmICh0aGlzLnNlbGVjdGVkU2t1Q29tYikgewogICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkU2t1Q29tYi5zdG9ja19udW07CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMuc2t1LnN0b2NrX251bTsKICAgIH0sCiAgICBzdG9ja1RleHQ6IGZ1bmN0aW9uIHN0b2NrVGV4dCgpIHsKICAgICAgdmFyIGggPSB0aGlzLiRjcmVhdGVFbGVtZW50OwogICAgICB2YXIgc3RvY2tGb3JtYXR0ZXIgPSB0aGlzLmN1c3RvbVN0ZXBwZXJDb25maWcuc3RvY2tGb3JtYXR0ZXI7CiAgICAgIGlmIChzdG9ja0Zvcm1hdHRlcikgewogICAgICAgIHJldHVybiBzdG9ja0Zvcm1hdHRlcih0aGlzLnN0b2NrKTsKICAgICAgfQogICAgICByZXR1cm4gW3QoJ3N0b2NrJykgKyAiICIsIGgoInNwYW4iLCB7CiAgICAgICAgImNsYXNzIjogYmVtKCdzdG9jay1udW0nLCB7CiAgICAgICAgICBoaWdobGlnaHQ6IHRoaXMuc3RvY2sgPCB0aGlzLnN0b2NrVGhyZXNob2xkCiAgICAgICAgfSkKICAgICAgfSwgW3RoaXMuc3RvY2tdKSwgIiAiICsgdCgnc3RvY2tVbml0JyldOwogICAgfSwKICAgIHNlbGVjdGVkVGV4dDogZnVuY3Rpb24gc2VsZWN0ZWRUZXh0KCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRTa3VDb21iKSB7CiAgICAgICAgdmFyIHZhbHVlcyA9IHRoaXMuc2VsZWN0ZWRTa3VWYWx1ZXMuY29uY2F0KHRoaXMuc2VsZWN0ZWRQcm9wVmFsdWVzKTsKICAgICAgICByZXR1cm4gdCgnc2VsZWN0ZWQnKSArICIgIiArIHZhbHVlcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIHJldHVybiBpdGVtLm5hbWU7CiAgICAgICAgfSkuam9pbignICcpOwogICAgICB9CiAgICAgIHZhciB1bnNlbGVjdGVkU2t1ID0gdGhpcy5za3VUcmVlLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHJldHVybiBfdGhpczIuc2VsZWN0ZWRTa3VbaXRlbS5rX3NdID09PSBVTlNFTEVDVEVEX1NLVV9WQUxVRV9JRDsKICAgICAgfSkubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW0uazsKICAgICAgfSk7CiAgICAgIHZhciB1bnNlbGVjdGVkUHJvcCA9IHRoaXMucHJvcExpc3QuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIChfdGhpczIuc2VsZWN0ZWRQcm9wW2l0ZW0ua19pZF0gfHwgW10pLmxlbmd0aCA8IDE7CiAgICAgIH0pLm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHJldHVybiBpdGVtLms7CiAgICAgIH0pOwogICAgICByZXR1cm4gdCgnc2VsZWN0JykgKyAiICIgKyB1bnNlbGVjdGVkU2t1LmNvbmNhdCh1bnNlbGVjdGVkUHJvcCkuam9pbignICcpOwogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHZhciBza3VFdmVudEJ1cyA9IG5ldyBWdWUoKTsKICAgIHRoaXMuc2t1RXZlbnRCdXMgPSBza3VFdmVudEJ1czsKICAgIHNrdUV2ZW50QnVzLiRvbignc2t1OnNlbGVjdCcsIHRoaXMub25TZWxlY3QpOwogICAgc2t1RXZlbnRCdXMuJG9uKCdza3U6cHJvcFNlbGVjdCcsIHRoaXMub25Qcm9wU2VsZWN0KTsKICAgIHNrdUV2ZW50QnVzLiRvbignc2t1Om51bUNoYW5nZScsIHRoaXMub25OdW1DaGFuZ2UpOwogICAgc2t1RXZlbnRCdXMuJG9uKCdza3U6cHJldmlld0ltYWdlJywgdGhpcy5vblByZXZpZXdJbWFnZSk7CiAgICBza3VFdmVudEJ1cy4kb24oJ3NrdTpvdmVyTGltaXQnLCB0aGlzLm9uT3ZlckxpbWl0KTsKICAgIHNrdUV2ZW50QnVzLiRvbignc2t1OnN0ZXBwZXJTdGF0ZScsIHRoaXMub25TdGVwcGVyU3RhdGUpOwogICAgc2t1RXZlbnRCdXMuJG9uKCdza3U6YWRkQ2FydCcsIHRoaXMub25BZGRDYXJ0KTsKICAgIHNrdUV2ZW50QnVzLiRvbignc2t1OmJ1eScsIHRoaXMub25CdXkpOwogICAgdGhpcy5yZXNldFN0ZXBwZXIoKTsKICAgIHRoaXMucmVzZXRTZWxlY3RlZFNrdSgpOwoKICAgIC8vIOe7hOS7tuWIneWni+WMluWQjueahOmSqeWtkO+8jOaKm+WHunNrdUV2ZW50QnVzCiAgICB0aGlzLiRlbWl0KCdhZnRlci1za3UtY3JlYXRlJywgc2t1RXZlbnRCdXMpOwogIH0sCiAgbWV0aG9kczogewogICAgcmVzZXRTdGVwcGVyOiBmdW5jdGlvbiByZXNldFN0ZXBwZXIoKSB7CiAgICAgIHZhciBza3VTdGVwcGVyID0gdGhpcy4kcmVmcy5za3VTdGVwcGVyOwogICAgICB2YXIgc2VsZWN0ZWROdW0gPSB0aGlzLmluaXRpYWxTa3Uuc2VsZWN0ZWROdW07CiAgICAgIHZhciBudW0gPSBzZWxlY3RlZE51bSAhPSBudWxsID8gc2VsZWN0ZWROdW0gOiB0aGlzLnN0YXJ0U2FsZU51bTsKICAgICAgLy8g55So5p2l57yT5a2Y5LiN5ZCI5rOV55qE5oOF5Ya1CiAgICAgIHRoaXMuc3RlcHBlckVycm9yID0gbnVsbDsKICAgICAgaWYgKHNrdVN0ZXBwZXIpIHsKICAgICAgICBza3VTdGVwcGVyLnNldEN1cnJlbnROdW0obnVtKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyDlvZPpppbmrKHliqDovb3vvIhza3VTdGVwcGVyIOS4uuepuu+8ieaXtu+8jOS8oOWFpeaVsOmHj+WmguaenOS4jeWQiOazle+8jOWPr+iDveS8muWtmOWcqOmXrumimAogICAgICAgIHRoaXMuc2VsZWN0ZWROdW0gPSBudW07CiAgICAgIH0KICAgIH0sCiAgICAvLyBAZXhwb3NlZC1hcGkKICAgIHJlc2V0U2VsZWN0ZWRTa3U6IGZ1bmN0aW9uIHJlc2V0U2VsZWN0ZWRTa3UoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwogICAgICB0aGlzLnNlbGVjdGVkU2t1ID0ge307CgogICAgICAvLyDph43nva4gc2VsZWN0ZWRTa3UKICAgICAgdGhpcy5za3VUcmVlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICBfdGhpczMuc2VsZWN0ZWRTa3VbaXRlbS5rX3NdID0gVU5TRUxFQ1RFRF9TS1VfVkFMVUVfSUQ7CiAgICAgIH0pOwogICAgICB0aGlzLnNrdVRyZWUuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHZhciBrZXkgPSBpdGVtLmtfczsKICAgICAgICAvLyDop4TmoLzlgLzlj6rmnIkx5Liq5pe277yM5LyY5YWI5Yik5patCiAgICAgICAgdmFyIHZhbHVlSWQgPSBpdGVtLnYubGVuZ3RoID09PSAxID8gaXRlbS52WzBdLmlkIDogX3RoaXMzLmluaXRpYWxTa3Vba2V5XTsKICAgICAgICBpZiAodmFsdWVJZCAmJiBpc1NrdUNob29zYWJsZShfdGhpczMuc2t1TGlzdCwgX3RoaXMzLnNlbGVjdGVkU2t1LCB7CiAgICAgICAgICBrZXk6IGtleSwKICAgICAgICAgIHZhbHVlSWQ6IHZhbHVlSWQKICAgICAgICB9KSkgewogICAgICAgICAgX3RoaXMzLnNlbGVjdGVkU2t1W2tleV0gPSB2YWx1ZUlkOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHZhciBza3VWYWx1ZXMgPSB0aGlzLnNlbGVjdGVkU2t1VmFsdWVzOwogICAgICBpZiAoc2t1VmFsdWVzLmxlbmd0aCA+IDApIHsKICAgICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpczMuJGVtaXQoJ3NrdS1zZWxlY3RlZCcsIHsKICAgICAgICAgICAgc2t1VmFsdWU6IHNrdVZhbHVlc1tza3VWYWx1ZXMubGVuZ3RoIC0gMV0sCiAgICAgICAgICAgIHNlbGVjdGVkU2t1OiBfdGhpczMuc2VsZWN0ZWRTa3UsCiAgICAgICAgICAgIHNlbGVjdGVkU2t1Q29tYjogX3RoaXMzLnNlbGVjdGVkU2t1Q29tYgogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIC8vIOmHjee9ruWVhuWTgeWxnuaApwogICAgICB0aGlzLnNlbGVjdGVkUHJvcCA9IHt9OwogICAgICB2YXIgX3RoaXMkaW5pdGlhbFNrdSRzZWxlID0gdGhpcy5pbml0aWFsU2t1LnNlbGVjdGVkUHJvcCwKICAgICAgICBzZWxlY3RlZFByb3AgPSBfdGhpcyRpbml0aWFsU2t1JHNlbGUgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkaW5pdGlhbFNrdSRzZWxlOwogICAgICAvLyDpgInkuK3lpJbpg6jkvKDlhaXkv6Hmga8KICAgICAgdGhpcy5wcm9wTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgaWYgKHNlbGVjdGVkUHJvcFtpdGVtLmtfaWRdKSB7CiAgICAgICAgICBfdGhpczMuc2VsZWN0ZWRQcm9wW2l0ZW0ua19pZF0gPSBzZWxlY3RlZFByb3BbaXRlbS5rX2lkXTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICBpZiAoaXNFbXB0eSh0aGlzLnNlbGVjdGVkUHJvcCkpIHsKICAgICAgICB0aGlzLnByb3BMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIHZhciBfaXRlbSR2OwogICAgICAgICAgLy8g5rKh5pyJ5Yqg5Lu355qE5bGe5oCn77yM6buY6K6k6YCJ5Lit56ys5LiA5LiqCiAgICAgICAgICBpZiAoKGl0ZW0gPT0gbnVsbCB8fCAoX2l0ZW0kdiA9IGl0ZW0udikgPT0gbnVsbCA/IHZvaWQgMCA6IF9pdGVtJHYubGVuZ3RoKSA+IDApIHsKICAgICAgICAgICAgdmFyIHYgPSBpdGVtLnYsCiAgICAgICAgICAgICAga19pZCA9IGl0ZW0ua19pZDsKICAgICAgICAgICAgdmFyIGlzSGFzQ29uZmlnUHJpY2UgPSB2LnNvbWUoZnVuY3Rpb24gKGkpIHsKICAgICAgICAgICAgICByZXR1cm4gK2kucHJpY2UgIT09IDA7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAvLyDmsqHmnInliqDku7flsZ7mgKcKICAgICAgICAgICAgaWYgKCFpc0hhc0NvbmZpZ1ByaWNlKSB7CiAgICAgICAgICAgICAgLy8g5om+5Yiw56ys5LiA5Liq5LiN6KKr56aB55So55qE5bGe5oCnCiAgICAgICAgICAgICAgLy8g5Y6G5Y+y5aaC5p6c5rKh5pyJIHRleHRfc3RhdHVzIOWtl+auteeahO+8jOWwseebuOW9k+S6juayv+eUqOebtOaOpeWOn+adpeeahOmAu+i+keWPluesrOS4gOS4quWxnuaApwogICAgICAgICAgICAgIHZhciBmaXJzdEVuYWJsZVByb3AgPSB2LmZpbmQoZnVuY3Rpb24gKHByb3ApIHsKICAgICAgICAgICAgICAgIHJldHVybiBwcm9wLnRleHRfc3RhdHVzICE9PSAwOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGlmIChmaXJzdEVuYWJsZVByb3ApIHsKICAgICAgICAgICAgICAgIF90aGlzMy5zZWxlY3RlZFByb3Bba19pZF0gPSBbZmlyc3RFbmFibGVQcm9wLmlkXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgICB2YXIgcHJvcFZhbHVlcyA9IHRoaXMuc2VsZWN0ZWRQcm9wVmFsdWVzOwogICAgICBpZiAocHJvcFZhbHVlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy4kZW1pdCgnc2t1LXByb3Atc2VsZWN0ZWQnLCB7CiAgICAgICAgICBwcm9wVmFsdWU6IHByb3BWYWx1ZXNbcHJvcFZhbHVlcy5sZW5ndGggLSAxXSwKICAgICAgICAgIHNlbGVjdGVkUHJvcDogdGhpcy5zZWxlY3RlZFByb3AsCiAgICAgICAgICBzZWxlY3RlZFNrdUNvbWI6IHRoaXMuc2VsZWN0ZWRTa3VDb21iCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIC8vIOaKm+WHuumHjee9ruS6i+S7tgogICAgICB0aGlzLiRlbWl0KCdza3UtcmVzZXQnLCB7CiAgICAgICAgc2VsZWN0ZWRTa3U6IHRoaXMuc2VsZWN0ZWRTa3UsCiAgICAgICAgc2VsZWN0ZWRQcm9wOiB0aGlzLnNlbGVjdGVkUHJvcCwKICAgICAgICBzZWxlY3RlZFNrdUNvbWI6IHRoaXMuc2VsZWN0ZWRTa3VDb21iCiAgICAgIH0pOwogICAgICB0aGlzLmNlbnRlckluaXRpYWxTa3UoKTsKICAgIH0sCiAgICBnZXRTa3VNZXNzYWdlczogZnVuY3Rpb24gZ2V0U2t1TWVzc2FnZXMoKSB7CiAgICAgIHJldHVybiB0aGlzLiRyZWZzLnNrdU1lc3NhZ2VzID8gdGhpcy4kcmVmcy5za3VNZXNzYWdlcy5nZXRNZXNzYWdlcygpIDoge307CiAgICB9LAogICAgZ2V0U2t1Q2FydE1lc3NhZ2VzOiBmdW5jdGlvbiBnZXRTa3VDYXJ0TWVzc2FnZXMoKSB7CiAgICAgIHJldHVybiB0aGlzLiRyZWZzLnNrdU1lc3NhZ2VzID8gdGhpcy4kcmVmcy5za3VNZXNzYWdlcy5nZXRDYXJ0TWVzc2FnZXMoKSA6IHt9OwogICAgfSwKICAgIHZhbGlkYXRlU2t1TWVzc2FnZXM6IGZ1bmN0aW9uIHZhbGlkYXRlU2t1TWVzc2FnZXMoKSB7CiAgICAgIHJldHVybiB0aGlzLiRyZWZzLnNrdU1lc3NhZ2VzID8gdGhpcy4kcmVmcy5za3VNZXNzYWdlcy52YWxpZGF0ZU1lc3NhZ2VzKCkgOiAnJzsKICAgIH0sCiAgICB2YWxpZGF0ZVNrdTogZnVuY3Rpb24gdmFsaWRhdGVTa3UoKSB7CiAgICAgIGlmICh0aGlzLnNlbGVjdGVkTnVtID09PSAwKSB7CiAgICAgICAgcmV0dXJuIHQoJ3VuYXZhaWxhYmxlJyk7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuaXNTa3VDb21iU2VsZWN0ZWQpIHsKICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZVNrdU1lc3NhZ2VzKCk7CiAgICAgIH0KCiAgICAgIC8vIOiHquWumuS5iXNrdeagoemqjAogICAgICBpZiAodGhpcy5jdXN0b21Ta3VWYWxpZGF0b3IpIHsKICAgICAgICB2YXIgZXJyID0gdGhpcy5jdXN0b21Ta3VWYWxpZGF0b3IodGhpcyk7CiAgICAgICAgaWYgKGVycikgcmV0dXJuIGVycjsKICAgICAgfQogICAgICByZXR1cm4gdCgnc2VsZWN0U2t1Jyk7CiAgICB9LAogICAgb25TZWxlY3Q6IGZ1bmN0aW9uIG9uU2VsZWN0KHNrdVZhbHVlKSB7CiAgICAgIHZhciBfZXh0ZW5kczIsIF9leHRlbmRzMzsKICAgICAgLy8g54K55Ye75bey6YCJ5Lit55qEc2t15pe25YiZ5Y+W5raI6YCJ5LitCiAgICAgIHRoaXMuc2VsZWN0ZWRTa3UgPSB0aGlzLnNlbGVjdGVkU2t1W3NrdVZhbHVlLnNrdUtleVN0cl0gPT09IHNrdVZhbHVlLmlkID8gX2V4dGVuZHMoe30sIHRoaXMuc2VsZWN0ZWRTa3UsIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW3NrdVZhbHVlLnNrdUtleVN0cl0gPSBVTlNFTEVDVEVEX1NLVV9WQUxVRV9JRCwgX2V4dGVuZHMyKSkgOiBfZXh0ZW5kcyh7fSwgdGhpcy5zZWxlY3RlZFNrdSwgKF9leHRlbmRzMyA9IHt9LCBfZXh0ZW5kczNbc2t1VmFsdWUuc2t1S2V5U3RyXSA9IHNrdVZhbHVlLmlkLCBfZXh0ZW5kczMpKTsKICAgICAgdGhpcy4kZW1pdCgnc2t1LXNlbGVjdGVkJywgewogICAgICAgIHNrdVZhbHVlOiBza3VWYWx1ZSwKICAgICAgICBzZWxlY3RlZFNrdTogdGhpcy5zZWxlY3RlZFNrdSwKICAgICAgICBzZWxlY3RlZFNrdUNvbWI6IHRoaXMuc2VsZWN0ZWRTa3VDb21iCiAgICAgIH0pOwogICAgfSwKICAgIG9uUHJvcFNlbGVjdDogZnVuY3Rpb24gb25Qcm9wU2VsZWN0KHByb3BWYWx1ZSkgewogICAgICB2YXIgX2V4dGVuZHM0OwogICAgICB2YXIgYXJyID0gdGhpcy5zZWxlY3RlZFByb3BbcHJvcFZhbHVlLnNrdUtleVN0cl0gfHwgW107CiAgICAgIHZhciBwb3MgPSBhcnIuaW5kZXhPZihwcm9wVmFsdWUuaWQpOwogICAgICBpZiAocG9zID4gLTEpIHsKICAgICAgICBhcnIuc3BsaWNlKHBvcywgMSk7CiAgICAgIH0gZWxzZSBpZiAocHJvcFZhbHVlLm11bHRpcGxlKSB7CiAgICAgICAgYXJyLnB1c2gocHJvcFZhbHVlLmlkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBhcnIuc3BsaWNlKDAsIDEsIHByb3BWYWx1ZS5pZCk7CiAgICAgIH0KICAgICAgdGhpcy5zZWxlY3RlZFByb3AgPSBfZXh0ZW5kcyh7fSwgdGhpcy5zZWxlY3RlZFByb3AsIChfZXh0ZW5kczQgPSB7fSwgX2V4dGVuZHM0W3Byb3BWYWx1ZS5za3VLZXlTdHJdID0gYXJyLCBfZXh0ZW5kczQpKTsKICAgICAgdGhpcy4kZW1pdCgnc2t1LXByb3Atc2VsZWN0ZWQnLCB7CiAgICAgICAgcHJvcFZhbHVlOiBwcm9wVmFsdWUsCiAgICAgICAgc2VsZWN0ZWRQcm9wOiB0aGlzLnNlbGVjdGVkUHJvcCwKICAgICAgICBzZWxlY3RlZFNrdUNvbWI6IHRoaXMuc2VsZWN0ZWRTa3VDb21iCiAgICAgIH0pOwogICAgfSwKICAgIG9uTnVtQ2hhbmdlOiBmdW5jdGlvbiBvbk51bUNoYW5nZShudW0pIHsKICAgICAgdGhpcy5zZWxlY3RlZE51bSA9IG51bTsKICAgIH0sCiAgICBvblByZXZpZXdJbWFnZTogZnVuY3Rpb24gb25QcmV2aWV3SW1hZ2Uoc2VsZWN0ZWRWYWx1ZSkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKICAgICAgdmFyIGltYWdlTGlzdCA9IHRoaXMuaW1hZ2VMaXN0OwogICAgICB2YXIgaW5kZXggPSAwOwogICAgICB2YXIgaW5kZXhJbWFnZSA9IGltYWdlTGlzdFswXTsKICAgICAgaWYgKHNlbGVjdGVkVmFsdWUgJiYgc2VsZWN0ZWRWYWx1ZS5pbWdVcmwpIHsKICAgICAgICB0aGlzLmltYWdlTGlzdC5zb21lKGZ1bmN0aW9uIChpbWFnZSwgcG9zKSB7CiAgICAgICAgICBpZiAoaW1hZ2UgPT09IHNlbGVjdGVkVmFsdWUuaW1nVXJsKSB7CiAgICAgICAgICAgIGluZGV4ID0gcG9zOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9KTsKICAgICAgICBpbmRleEltYWdlID0gc2VsZWN0ZWRWYWx1ZS5pbWdVcmw7CiAgICAgIH0KICAgICAgdmFyIHBhcmFtcyA9IF9leHRlbmRzKHt9LCBzZWxlY3RlZFZhbHVlLCB7CiAgICAgICAgaW5kZXg6IGluZGV4LAogICAgICAgIGltYWdlTGlzdDogdGhpcy5pbWFnZUxpc3QsCiAgICAgICAgaW5kZXhJbWFnZTogaW5kZXhJbWFnZQogICAgICB9KTsKICAgICAgdGhpcy4kZW1pdCgnb3Blbi1wcmV2aWV3JywgcGFyYW1zKTsKICAgICAgaWYgKCF0aGlzLnByZXZpZXdPbkNsaWNrSW1hZ2UpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgSW1hZ2VQcmV2aWV3KHsKICAgICAgICBpbWFnZXM6IHRoaXMuaW1hZ2VMaXN0LAogICAgICAgIHN0YXJ0UG9zaXRpb246IGluZGV4LAogICAgICAgIG9uQ2xvc2U6IGZ1bmN0aW9uIG9uQ2xvc2UoKSB7CiAgICAgICAgICBfdGhpczQuJGVtaXQoJ2Nsb3NlLXByZXZpZXcnLCBwYXJhbXMpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgb25PdmVyTGltaXQ6IGZ1bmN0aW9uIG9uT3ZlckxpbWl0KGRhdGEpIHsKICAgICAgdmFyIGFjdGlvbiA9IGRhdGEuYWN0aW9uLAogICAgICAgIGxpbWl0VHlwZSA9IGRhdGEubGltaXRUeXBlLAogICAgICAgIHF1b3RhID0gZGF0YS5xdW90YSwKICAgICAgICBxdW90YVVzZWQgPSBkYXRhLnF1b3RhVXNlZDsKICAgICAgdmFyIGhhbmRsZU92ZXJMaW1pdCA9IHRoaXMuY3VzdG9tU3RlcHBlckNvbmZpZy5oYW5kbGVPdmVyTGltaXQ7CiAgICAgIGlmIChoYW5kbGVPdmVyTGltaXQpIHsKICAgICAgICBoYW5kbGVPdmVyTGltaXQoZGF0YSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGlmIChhY3Rpb24gPT09ICdtaW51cycpIHsKICAgICAgICBpZiAodGhpcy5zdGFydFNhbGVOdW0gPiAxKSB7CiAgICAgICAgICBUb2FzdCh0KCdtaW51c1N0YXJ0VGlwJywgdGhpcy5zdGFydFNhbGVOdW0pKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgVG9hc3QodCgnbWludXNUaXAnKSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gJ3BsdXMnKSB7CiAgICAgICAgaWYgKGxpbWl0VHlwZSA9PT0gUVVPVEFfTElNSVQpIHsKICAgICAgICAgIGlmIChxdW90YVVzZWQgPiAwKSB7CiAgICAgICAgICAgIFRvYXN0KHQoJ3F1b3RhVXNlZFRpcCcsIHF1b3RhLCBxdW90YVVzZWQpKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIFRvYXN0KHQoJ3F1b3RhVGlwJywgcXVvdGEpKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgVG9hc3QodCgnc29sZG91dCcpKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBvblN0ZXBwZXJTdGF0ZTogZnVuY3Rpb24gb25TdGVwcGVyU3RhdGUoZGF0YSkgewogICAgICB0aGlzLnN0ZXBwZXJFcnJvciA9IGRhdGEudmFsaWQgPyBudWxsIDogX2V4dGVuZHMoe30sIGRhdGEsIHsKICAgICAgICBhY3Rpb246ICdwbHVzJwogICAgICB9KTsKICAgIH0sCiAgICBvbkFkZENhcnQ6IGZ1bmN0aW9uIG9uQWRkQ2FydCgpIHsKICAgICAgdGhpcy5vbkJ1eU9yQWRkQ2FydCgnYWRkLWNhcnQnKTsKICAgIH0sCiAgICBvbkJ1eTogZnVuY3Rpb24gb25CdXkoKSB7CiAgICAgIHRoaXMub25CdXlPckFkZENhcnQoJ2J1eS1jbGlja2VkJyk7CiAgICB9LAogICAgb25CdXlPckFkZENhcnQ6IGZ1bmN0aW9uIG9uQnV5T3JBZGRDYXJ0KHR5cGUpIHsKICAgICAgLy8gc2t1IOS4jeespuWQiOi0reS5sOadoeS7tgogICAgICBpZiAodGhpcy5zdGVwcGVyRXJyb3IpIHsKICAgICAgICByZXR1cm4gdGhpcy5vbk92ZXJMaW1pdCh0aGlzLnN0ZXBwZXJFcnJvcik7CiAgICAgIH0KICAgICAgdmFyIGVycm9yID0gdGhpcy52YWxpZGF0ZVNrdSgpOwogICAgICBpZiAoZXJyb3IpIHsKICAgICAgICBUb2FzdChlcnJvcik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy4kZW1pdCh0eXBlLCB0aGlzLmdldFNrdURhdGEoKSk7CiAgICAgIH0KICAgIH0sCiAgICAvLyBAZXhwb3NlZC1hcGkKICAgIGdldFNrdURhdGE6IGZ1bmN0aW9uIGdldFNrdURhdGEoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgZ29vZHNJZDogdGhpcy5nb29kc0lkLAogICAgICAgIG1lc3NhZ2VzOiB0aGlzLmdldFNrdU1lc3NhZ2VzKCksCiAgICAgICAgc2VsZWN0ZWROdW06IHRoaXMuc2VsZWN0ZWROdW0sCiAgICAgICAgY2FydE1lc3NhZ2VzOiB0aGlzLmdldFNrdUNhcnRNZXNzYWdlcygpLAogICAgICAgIHNlbGVjdGVkU2t1Q29tYjogdGhpcy5zZWxlY3RlZFNrdUNvbWIKICAgICAgfTsKICAgIH0sCiAgICAvLyDlvZMgcG9wdXAg5a6M5YWo5omT5byA5ZCO5omn6KGMCiAgICBvbk9wZW5lZDogZnVuY3Rpb24gb25PcGVuZWQoKSB7CiAgICAgIHRoaXMuY2VudGVySW5pdGlhbFNrdSgpOwogICAgfSwKICAgIGNlbnRlckluaXRpYWxTa3U6IGZ1bmN0aW9uIGNlbnRlckluaXRpYWxTa3UoKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwogICAgICAodGhpcy4kcmVmcy5za3VSb3dzIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uIChpdCkgewogICAgICAgIHZhciBfcmVmID0gaXQuc2t1Um93IHx8IHt9LAogICAgICAgICAga19zID0gX3JlZi5rX3M7CiAgICAgICAgaXQuY2VudGVySXRlbShfdGhpczUuaW5pdGlhbFNrdVtrX3NdKTsKICAgICAgfSk7CiAgICB9CiAgfSwKICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgIHZhciBfdGhpczYgPSB0aGlzOwogICAgdmFyIGggPSBhcmd1bWVudHNbMF07CiAgICBpZiAodGhpcy5pc1NrdUVtcHR5KSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHZhciBza3UgPSB0aGlzLnNrdSwKICAgICAgc2t1TGlzdCA9IHRoaXMuc2t1TGlzdCwKICAgICAgZ29vZHMgPSB0aGlzLmdvb2RzLAogICAgICBwcmljZSA9IHRoaXMucHJpY2UsCiAgICAgIGxhenlMb2FkID0gdGhpcy5sYXp5TG9hZCwKICAgICAgb3JpZ2luUHJpY2UgPSB0aGlzLm9yaWdpblByaWNlLAogICAgICBza3VFdmVudEJ1cyA9IHRoaXMuc2t1RXZlbnRCdXMsCiAgICAgIHNlbGVjdGVkU2t1ID0gdGhpcy5zZWxlY3RlZFNrdSwKICAgICAgc2VsZWN0ZWRQcm9wID0gdGhpcy5zZWxlY3RlZFByb3AsCiAgICAgIHNlbGVjdGVkTnVtID0gdGhpcy5zZWxlY3RlZE51bSwKICAgICAgc3RlcHBlclRpdGxlID0gdGhpcy5zdGVwcGVyVGl0bGUsCiAgICAgIHNlbGVjdGVkU2t1Q29tYiA9IHRoaXMuc2VsZWN0ZWRTa3VDb21iLAogICAgICBzaG93SGVhZGVySW1hZ2UgPSB0aGlzLnNob3dIZWFkZXJJbWFnZSwKICAgICAgZGlzYWJsZVNvbGRvdXRTa3UgPSB0aGlzLmRpc2FibGVTb2xkb3V0U2t1OwogICAgdmFyIHNsb3RzUHJvcHMgPSB7CiAgICAgIHByaWNlOiBwcmljZSwKICAgICAgb3JpZ2luUHJpY2U6IG9yaWdpblByaWNlLAogICAgICBzZWxlY3RlZE51bTogc2VsZWN0ZWROdW0sCiAgICAgIHNrdUV2ZW50QnVzOiBza3VFdmVudEJ1cywKICAgICAgc2VsZWN0ZWRTa3U6IHNlbGVjdGVkU2t1LAogICAgICBzZWxlY3RlZFNrdUNvbWI6IHNlbGVjdGVkU2t1Q29tYgogICAgfTsKICAgIHZhciBzbG90cyA9IGZ1bmN0aW9uIHNsb3RzKG5hbWUpIHsKICAgICAgcmV0dXJuIF90aGlzNi5zbG90cyhuYW1lLCBzbG90c1Byb3BzKTsKICAgIH07CiAgICB2YXIgSGVhZGVyID0gc2xvdHMoJ3NrdS1oZWFkZXInKSB8fCBoKFNrdUhlYWRlciwgewogICAgICAiYXR0cnMiOiB7CiAgICAgICAgInNrdSI6IHNrdSwKICAgICAgICAiZ29vZHMiOiBnb29kcywKICAgICAgICAic2t1RXZlbnRCdXMiOiBza3VFdmVudEJ1cywKICAgICAgICAic2VsZWN0ZWRTa3UiOiBzZWxlY3RlZFNrdSwKICAgICAgICAic2hvd0hlYWRlckltYWdlIjogc2hvd0hlYWRlckltYWdlCiAgICAgIH0KICAgIH0sIFtoKCJ0ZW1wbGF0ZSIsIHsKICAgICAgInNsb3QiOiAic2t1LWhlYWRlci1pbWFnZS1leHRyYSIKICAgIH0sIFtzbG90cygnc2t1LWhlYWRlci1pbWFnZS1leHRyYScpXSksIHNsb3RzKCdza3UtaGVhZGVyLXByaWNlJykgfHwgaCgiZGl2IiwgewogICAgICAiY2xhc3MiOiAidmFuLXNrdV9fZ29vZHMtcHJpY2UiCiAgICB9LCBbaCgic3BhbiIsIHsKICAgICAgImNsYXNzIjogInZhbi1za3VfX3ByaWNlLXN5bWJvbCIKICAgIH0sIFsiXHVGRkU1Il0pLCBoKCJzcGFuIiwgewogICAgICAiY2xhc3MiOiAidmFuLXNrdV9fcHJpY2UtbnVtIgogICAgfSwgW3ByaWNlXSksIHRoaXMucHJpY2VUYWcgJiYgaCgic3BhbiIsIHsKICAgICAgImNsYXNzIjogInZhbi1za3VfX3ByaWNlLXRhZyIKICAgIH0sIFt0aGlzLnByaWNlVGFnXSldKSwgc2xvdHMoJ3NrdS1oZWFkZXItb3JpZ2luLXByaWNlJykgfHwgb3JpZ2luUHJpY2UgJiYgaChTa3VIZWFkZXJJdGVtLCBbdCgnb3JpZ2luUHJpY2UnKSwgIiBcdUZGRTUiLCBvcmlnaW5QcmljZV0pLCAhdGhpcy5oaWRlU3RvY2sgJiYgaChTa3VIZWFkZXJJdGVtLCBbaCgic3BhbiIsIHsKICAgICAgImNsYXNzIjogInZhbi1za3VfX3N0b2NrIgogICAgfSwgW3RoaXMuc3RvY2tUZXh0XSldKSwgdGhpcy5oYXNTa3VPckF0dHIgJiYgIXRoaXMuaGlkZVNlbGVjdGVkVGV4dCAmJiBoKFNrdUhlYWRlckl0ZW0sIFt0aGlzLnNlbGVjdGVkVGV4dF0pLCBzbG90cygnc2t1LWhlYWRlci1leHRyYScpXSk7CiAgICB2YXIgR3JvdXAgPSBzbG90cygnc2t1LWdyb3VwJykgfHwgdGhpcy5oYXNTa3VPckF0dHIgJiYgaCgiZGl2IiwgewogICAgICAiY2xhc3MiOiB0aGlzLnNrdUdyb3VwQ2xhc3MKICAgIH0sIFt0aGlzLnNrdVRyZWUubWFwKGZ1bmN0aW9uIChza3VUcmVlSXRlbSkgewogICAgICByZXR1cm4gaChTa3VSb3csIHsKICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAic2t1Um93Ijogc2t1VHJlZUl0ZW0KICAgICAgICB9LAogICAgICAgICJyZWYiOiAic2t1Um93cyIsCiAgICAgICAgInJlZkluRm9yIjogdHJ1ZQogICAgICB9LCBbc2t1VHJlZUl0ZW0udi5tYXAoZnVuY3Rpb24gKHNrdVZhbHVlKSB7CiAgICAgICAgcmV0dXJuIGgoU2t1Um93SXRlbSwgewogICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAic2t1TGlzdCI6IHNrdUxpc3QsCiAgICAgICAgICAgICJsYXp5TG9hZCI6IGxhenlMb2FkLAogICAgICAgICAgICAic2t1VmFsdWUiOiBza3VWYWx1ZSwKICAgICAgICAgICAgInNrdUtleVN0ciI6IHNrdVRyZWVJdGVtLmtfcywKICAgICAgICAgICAgInNlbGVjdGVkU2t1Ijogc2VsZWN0ZWRTa3UsCiAgICAgICAgICAgICJza3VFdmVudEJ1cyI6IHNrdUV2ZW50QnVzLAogICAgICAgICAgICAiZGlzYWJsZVNvbGRvdXRTa3UiOiBkaXNhYmxlU29sZG91dFNrdSwKICAgICAgICAgICAgImxhcmdlSW1hZ2VNb2RlIjogc2t1VHJlZUl0ZW0ubGFyZ2VJbWFnZU1vZGUKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSldKTsKICAgIH0pLCB0aGlzLnByb3BMaXN0Lm1hcChmdW5jdGlvbiAoc2t1VHJlZUl0ZW0pIHsKICAgICAgcmV0dXJuIGgoU2t1Um93LCB7CiAgICAgICAgImF0dHJzIjogewogICAgICAgICAgInNrdVJvdyI6IHNrdVRyZWVJdGVtCiAgICAgICAgfQogICAgICB9LCBbc2t1VHJlZUl0ZW0udi5tYXAoZnVuY3Rpb24gKHNrdVZhbHVlKSB7CiAgICAgICAgcmV0dXJuIGgoU2t1Um93UHJvcEl0ZW0sIHsKICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgInNrdVZhbHVlIjogc2t1VmFsdWUsCiAgICAgICAgICAgICJza3VLZXlTdHIiOiBza3VUcmVlSXRlbS5rX2lkICsgJycsCiAgICAgICAgICAgICJzZWxlY3RlZFByb3AiOiBzZWxlY3RlZFByb3AsCiAgICAgICAgICAgICJza3VFdmVudEJ1cyI6IHNrdUV2ZW50QnVzLAogICAgICAgICAgICAibXVsdGlwbGUiOiBza3VUcmVlSXRlbS5pc19tdWx0aXBsZSwKICAgICAgICAgICAgImRpc2FibGVkIjogc2t1VmFsdWUudGV4dF9zdGF0dXMgPT09IDAKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSldKTsKICAgIH0pXSk7CiAgICB2YXIgU3RlcHBlciA9IHNsb3RzKCdza3Utc3RlcHBlcicpIHx8IGgoU2t1U3RlcHBlciwgewogICAgICAicmVmIjogInNrdVN0ZXBwZXIiLAogICAgICAiYXR0cnMiOiB7CiAgICAgICAgInN0b2NrIjogdGhpcy5zdG9jaywKICAgICAgICAicXVvdGEiOiB0aGlzLnF1b3RhLAogICAgICAgICJxdW90YVVzZWQiOiB0aGlzLnF1b3RhVXNlZCwKICAgICAgICAic3RhcnRTYWxlTnVtIjogdGhpcy5zdGFydFNhbGVOdW0sCiAgICAgICAgInNrdUV2ZW50QnVzIjogc2t1RXZlbnRCdXMsCiAgICAgICAgInNlbGVjdGVkTnVtIjogc2VsZWN0ZWROdW0sCiAgICAgICAgInN0ZXBwZXJUaXRsZSI6IHN0ZXBwZXJUaXRsZSwKICAgICAgICAic2t1U3RvY2tOdW0iOiBza3Uuc3RvY2tfbnVtLAogICAgICAgICJkaXNhYmxlU3RlcHBlcklucHV0IjogdGhpcy5kaXNhYmxlU3RlcHBlcklucHV0LAogICAgICAgICJjdXN0b21TdGVwcGVyQ29uZmlnIjogdGhpcy5jdXN0b21TdGVwcGVyQ29uZmlnLAogICAgICAgICJoaWRlUXVvdGFUZXh0IjogdGhpcy5oaWRlUXVvdGFUZXh0CiAgICAgIH0sCiAgICAgICJvbiI6IHsKICAgICAgICAiY2hhbmdlIjogZnVuY3Rpb24gY2hhbmdlKGV2ZW50KSB7CiAgICAgICAgICBfdGhpczYuJGVtaXQoJ3N0ZXBwZXItY2hhbmdlJywgZXZlbnQpOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgICB2YXIgTWVzc2FnZXMgPSBzbG90cygnc2t1LW1lc3NhZ2VzJykgfHwgaChTa3VNZXNzYWdlcywgewogICAgICAicmVmIjogInNrdU1lc3NhZ2VzIiwKICAgICAgImF0dHJzIjogewogICAgICAgICJnb29kc0lkIjogdGhpcy5nb29kc0lkLAogICAgICAgICJtZXNzYWdlQ29uZmlnIjogdGhpcy5tZXNzYWdlQ29uZmlnLAogICAgICAgICJtZXNzYWdlcyI6IHNrdS5tZXNzYWdlcwogICAgICB9CiAgICB9KTsKICAgIHZhciBBY3Rpb25zID0gc2xvdHMoJ3NrdS1hY3Rpb25zJykgfHwgaChTa3VBY3Rpb25zLCB7CiAgICAgICJhdHRycyI6IHsKICAgICAgICAiYnV5VGV4dCI6IHRoaXMuYnV5VGV4dCwKICAgICAgICAic2t1RXZlbnRCdXMiOiBza3VFdmVudEJ1cywKICAgICAgICAiYWRkQ2FydFRleHQiOiB0aGlzLmFkZENhcnRUZXh0LAogICAgICAgICJzaG93QWRkQ2FydEJ0biI6IHRoaXMuc2hvd0FkZENhcnRCdG4KICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gaChQb3B1cCwgewogICAgICAiYXR0cnMiOiB7CiAgICAgICAgInJvdW5kIjogdHJ1ZSwKICAgICAgICAiY2xvc2VhYmxlIjogdHJ1ZSwKICAgICAgICAicG9zaXRpb24iOiAiYm90dG9tIiwKICAgICAgICAiZ2V0Q29udGFpbmVyIjogdGhpcy5nZXRDb250YWluZXIsCiAgICAgICAgImNsb3NlT25DbGlja092ZXJsYXkiOiB0aGlzLmNsb3NlT25DbGlja092ZXJsYXksCiAgICAgICAgInNhZmVBcmVhSW5zZXRCb3R0b20iOiB0aGlzLnNhZmVBcmVhSW5zZXRCb3R0b20KICAgICAgfSwKICAgICAgImNsYXNzIjogInZhbi1za3UtY29udGFpbmVyIiwKICAgICAgIm9uIjogewogICAgICAgICJvcGVuZWQiOiB0aGlzLm9uT3BlbmVkCiAgICAgIH0sCiAgICAgICJtb2RlbCI6IHsKICAgICAgICB2YWx1ZTogX3RoaXM2LnNob3csCiAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIGNhbGxiYWNrKCQkdikgewogICAgICAgICAgX3RoaXM2LnNob3cgPSAkJHY7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBbSGVhZGVyLCBoKCJkaXYiLCB7CiAgICAgICJjbGFzcyI6ICJ2YW4tc2t1LWJvZHkiLAogICAgICAic3R5bGUiOiB0aGlzLmJvZHlTdHlsZQogICAgfSwgW3Nsb3RzKCdza3UtYm9keS10b3AnKSwgR3JvdXAsIHNsb3RzKCdleHRyYS1za3UtZ3JvdXAnKSwgU3RlcHBlciwgTWVzc2FnZXNdKSwgc2xvdHMoJ3NrdS1hY3Rpb25zLXRvcCcpLCBBY3Rpb25zXSk7CiAgfQp9KTs="},null]}