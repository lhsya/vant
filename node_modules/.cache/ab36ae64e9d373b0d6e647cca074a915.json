{"remainingRequest":"/Users/adamliu/works/vant/node_modules/babel-loader/lib/index.js!/Users/adamliu/works/vant/src/tabs/index.js","dependencies":[{"path":"/Users/adamliu/works/vant/src/tabs/index.js","mtime":1694509705054},{"path":"/Users/adamliu/works/vant/babel.config.js","mtime":1694509704583},{"path":"/Users/adamliu/works/vant/node_modules/cache-loader/dist/cjs.js","mtime":1694509793427},{"path":"/Users/adamliu/works/vant/node_modules/babel-loader/lib/index.js","mtime":1694509794381}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8gVXRpbHMKaW1wb3J0IHsgY3JlYXRlTmFtZXNwYWNlLCBpc0RlZiwgYWRkVW5pdCB9IGZyb20gJy4uL3V0aWxzJzsKaW1wb3J0IHsgc2Nyb2xsTGVmdFRvLCBzY3JvbGxUb3BUbyB9IGZyb20gJy4vdXRpbHMnOwppbXBvcnQgeyByb3V0ZSB9IGZyb20gJy4uL3V0aWxzL3JvdXRlcic7CmltcG9ydCB7IGlzSGlkZGVuIH0gZnJvbSAnLi4vdXRpbHMvZG9tL3N0eWxlJzsKaW1wb3J0IHsgb24sIG9mZiB9IGZyb20gJy4uL3V0aWxzL2RvbS9ldmVudCc7CmltcG9ydCB7IHVuaXRUb1B4IH0gZnJvbSAnLi4vdXRpbHMvZm9ybWF0L3VuaXQnOwppbXBvcnQgeyBCT1JERVJfVE9QX0JPVFRPTSB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50JzsKaW1wb3J0IHsgY2FsbEludGVyY2VwdG9yIH0gZnJvbSAnLi4vdXRpbHMvaW50ZXJjZXB0b3InOwppbXBvcnQgeyBnZXRTY3JvbGxlciwgZ2V0VmlzaWJsZVRvcCwgZ2V0RWxlbWVudFRvcCwgZ2V0VmlzaWJsZUhlaWdodCwgc2V0Um9vdFNjcm9sbFRvcCB9IGZyb20gJy4uL3V0aWxzL2RvbS9zY3JvbGwnOwoKLy8gTWl4aW5zCmltcG9ydCB7IFBhcmVudE1peGluIH0gZnJvbSAnLi4vbWl4aW5zL3JlbGF0aW9uJzsKaW1wb3J0IHsgQmluZEV2ZW50TWl4aW4gfSBmcm9tICcuLi9taXhpbnMvYmluZC1ldmVudCc7CgovLyBDb21wb25lbnRzCmltcG9ydCBUaXRsZSBmcm9tICcuL1RpdGxlJzsKaW1wb3J0IFN0aWNreSBmcm9tICcuLi9zdGlja3knOwppbXBvcnQgQ29udGVudCBmcm9tICcuL0NvbnRlbnQnOwp2YXIgX2NyZWF0ZU5hbWVzcGFjZSA9IGNyZWF0ZU5hbWVzcGFjZSgndGFicycpLAogIGNyZWF0ZUNvbXBvbmVudCA9IF9jcmVhdGVOYW1lc3BhY2VbMF0sCiAgYmVtID0gX2NyZWF0ZU5hbWVzcGFjZVsxXTsKZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29tcG9uZW50KHsKICBtaXhpbnM6IFtQYXJlbnRNaXhpbigndmFuVGFicycpLCBCaW5kRXZlbnRNaXhpbihmdW5jdGlvbiAoYmluZCkgewogICAgaWYgKCF0aGlzLnNjcm9sbGVyKSB7CiAgICAgIHRoaXMuc2Nyb2xsZXIgPSBnZXRTY3JvbGxlcih0aGlzLiRlbCk7CiAgICB9CiAgICBiaW5kKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMucmVzaXplLCB0cnVlKTsKICAgIGlmICh0aGlzLnNjcm9sbHNweSkgewogICAgICBiaW5kKHRoaXMuc2Nyb2xsZXIsICdzY3JvbGwnLCB0aGlzLm9uU2Nyb2xsLCB0cnVlKTsKICAgIH0KICB9KV0sCiAgaW5qZWN0OiB7CiAgICB2YW5Qb3B1cDogewogICAgICBkZWZhdWx0OiBudWxsCiAgICB9CiAgfSwKICBtb2RlbDogewogICAgcHJvcDogJ2FjdGl2ZScKICB9LAogIHByb3BzOiB7CiAgICBjb2xvcjogU3RyaW5nLAogICAgYm9yZGVyOiBCb29sZWFuLAogICAgc3RpY2t5OiBCb29sZWFuLAogICAgYW5pbWF0ZWQ6IEJvb2xlYW4sCiAgICBzd2lwZWFibGU6IEJvb2xlYW4sCiAgICBzY3JvbGxzcHk6IEJvb2xlYW4sCiAgICBiYWNrZ3JvdW5kOiBTdHJpbmcsCiAgICBsaW5lV2lkdGg6IFtOdW1iZXIsIFN0cmluZ10sCiAgICBsaW5lSGVpZ2h0OiBbTnVtYmVyLCBTdHJpbmddLAogICAgYmVmb3JlQ2hhbmdlOiBGdW5jdGlvbiwKICAgIHRpdGxlQWN0aXZlQ29sb3I6IFN0cmluZywKICAgIHRpdGxlSW5hY3RpdmVDb2xvcjogU3RyaW5nLAogICAgdHlwZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdsaW5lJwogICAgfSwKICAgIGFjdGl2ZTogewogICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLAogICAgICBkZWZhdWx0OiAwCiAgICB9LAogICAgZWxsaXBzaXM6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogdHJ1ZQogICAgfSwKICAgIGR1cmF0aW9uOiB7CiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sCiAgICAgIGRlZmF1bHQ6IDAuMwogICAgfSwKICAgIG9mZnNldFRvcDogewogICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLAogICAgICBkZWZhdWx0OiAwCiAgICB9LAogICAgbGF6eVJlbmRlcjogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiB0cnVlCiAgICB9LAogICAgc3dpcGVUaHJlc2hvbGQ6IHsKICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSwKICAgICAgZGVmYXVsdDogNQogICAgfQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHBvc2l0aW9uOiAnJywKICAgICAgY3VycmVudEluZGV4OiBudWxsLAogICAgICBsaW5lU3R5bGU6IHsKICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuY29sb3IKICAgICAgfQogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICAvLyB3aGV0aGVyIHRoZSBuYXYgaXMgc2Nyb2xsYWJsZQogICAgc2Nyb2xsYWJsZTogZnVuY3Rpb24gc2Nyb2xsYWJsZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ubGVuZ3RoID4gdGhpcy5zd2lwZVRocmVzaG9sZCB8fCAhdGhpcy5lbGxpcHNpczsKICAgIH0sCiAgICBuYXZTdHlsZTogZnVuY3Rpb24gbmF2U3R5bGUoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgYm9yZGVyQ29sb3I6IHRoaXMuY29sb3IsCiAgICAgICAgYmFja2dyb3VuZDogdGhpcy5iYWNrZ3JvdW5kCiAgICAgIH07CiAgICB9LAogICAgY3VycmVudE5hbWU6IGZ1bmN0aW9uIGN1cnJlbnROYW1lKCkgewogICAgICB2YXIgYWN0aXZlVGFiID0gdGhpcy5jaGlsZHJlblt0aGlzLmN1cnJlbnRJbmRleF07CiAgICAgIGlmIChhY3RpdmVUYWIpIHsKICAgICAgICByZXR1cm4gYWN0aXZlVGFiLmNvbXB1dGVkTmFtZTsKICAgICAgfQogICAgfSwKICAgIG9mZnNldFRvcFB4OiBmdW5jdGlvbiBvZmZzZXRUb3BQeCgpIHsKICAgICAgcmV0dXJuIHVuaXRUb1B4KHRoaXMub2Zmc2V0VG9wKTsKICAgIH0sCiAgICBzY3JvbGxPZmZzZXQ6IGZ1bmN0aW9uIHNjcm9sbE9mZnNldCgpIHsKICAgICAgaWYgKHRoaXMuc3RpY2t5KSB7CiAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0VG9wUHggKyB0aGlzLnRhYkhlaWdodDsKICAgICAgfQogICAgICByZXR1cm4gMDsKICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICBjb2xvcjogJ3NldExpbmUnLAogICAgYWN0aXZlOiBmdW5jdGlvbiBhY3RpdmUobmFtZSkgewogICAgICBpZiAobmFtZSAhPT0gdGhpcy5jdXJyZW50TmFtZSkgewogICAgICAgIHRoaXMuc2V0Q3VycmVudEluZGV4QnlOYW1lKG5hbWUpOwogICAgICB9CiAgICB9LAogICAgY2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB0aGlzLnNldEN1cnJlbnRJbmRleEJ5TmFtZSh0aGlzLmFjdGl2ZSk7CiAgICAgIHRoaXMuc2V0TGluZSgpOwogICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXMuc2Nyb2xsSW50b1ZpZXcodHJ1ZSk7CiAgICAgIH0pOwogICAgfSwKICAgIGN1cnJlbnRJbmRleDogZnVuY3Rpb24gY3VycmVudEluZGV4KCkgewogICAgICB0aGlzLnNjcm9sbEludG9WaWV3KCk7CiAgICAgIHRoaXMuc2V0TGluZSgpOwoKICAgICAgLy8gc2Nyb2xsIHRvIGNvcnJlY3QgcG9zaXRpb24KICAgICAgaWYgKHRoaXMuc3RpY2t5Rml4ZWQgJiYgIXRoaXMuc2Nyb2xsc3B5KSB7CiAgICAgICAgc2V0Um9vdFNjcm9sbFRvcChNYXRoLmNlaWwoZ2V0RWxlbWVudFRvcCh0aGlzLiRlbCkgLSB0aGlzLm9mZnNldFRvcFB4KSk7CiAgICAgIH0KICAgIH0sCiAgICBzY3JvbGxzcHk6IGZ1bmN0aW9uIHNjcm9sbHNweSh2YWwpIHsKICAgICAgaWYgKHZhbCkgewogICAgICAgIG9uKHRoaXMuc2Nyb2xsZXIsICdzY3JvbGwnLCB0aGlzLm9uU2Nyb2xsLCB0cnVlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBvZmYodGhpcy5zY3JvbGxlciwgJ3Njcm9sbCcsIHRoaXMub25TY3JvbGwpOwogICAgICB9CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIF90aGlzMiA9IHRoaXM7CiAgICB0aGlzLmluaXQoKTsKCiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdmFudC11aS92YW50L2lzc3Vlcy83OTU5CiAgICBpZiAodGhpcy52YW5Qb3B1cCkgewogICAgICB0aGlzLnZhblBvcHVwLm9uUmVvcGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczIuc2V0TGluZSgpOwogICAgICB9KTsKICAgIH0KICB9LAogIGFjdGl2YXRlZDogZnVuY3Rpb24gYWN0aXZhdGVkKCkgewogICAgdGhpcy5pbml0KCk7CiAgICB0aGlzLnNldExpbmUoKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIC8vIEBleHBvc2VkLWFwaQogICAgcmVzaXplOiBmdW5jdGlvbiByZXNpemUoKSB7CiAgICAgIHRoaXMuc2V0TGluZSgpOwogICAgfSwKICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwogICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXMzLmluaXRlZCA9IHRydWU7CiAgICAgICAgX3RoaXMzLnRhYkhlaWdodCA9IGdldFZpc2libGVIZWlnaHQoX3RoaXMzLiRyZWZzLndyYXApOwogICAgICAgIF90aGlzMy5zY3JvbGxJbnRvVmlldyh0cnVlKTsKICAgICAgfSk7CiAgICB9LAogICAgLy8gdXBkYXRlIG5hdiBiYXIgc3R5bGUKICAgIHNldExpbmU6IGZ1bmN0aW9uIHNldExpbmUoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwogICAgICB2YXIgc2hvdWxkQW5pbWF0ZSA9IHRoaXMuaW5pdGVkOwogICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHRpdGxlcyA9IF90aGlzNC4kcmVmcy50aXRsZXM7CiAgICAgICAgaWYgKCF0aXRsZXMgfHwgIXRpdGxlc1tfdGhpczQuY3VycmVudEluZGV4XSB8fCBfdGhpczQudHlwZSAhPT0gJ2xpbmUnIHx8IGlzSGlkZGVuKF90aGlzNC4kZWwpKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHZhciB0aXRsZSA9IHRpdGxlc1tfdGhpczQuY3VycmVudEluZGV4XS4kZWw7CiAgICAgICAgdmFyIGxpbmVXaWR0aCA9IF90aGlzNC5saW5lV2lkdGgsCiAgICAgICAgICBsaW5lSGVpZ2h0ID0gX3RoaXM0LmxpbmVIZWlnaHQ7CiAgICAgICAgdmFyIGxlZnQgPSB0aXRsZS5vZmZzZXRMZWZ0ICsgdGl0bGUub2Zmc2V0V2lkdGggLyAyOwogICAgICAgIHZhciBsaW5lU3R5bGUgPSB7CiAgICAgICAgICB3aWR0aDogYWRkVW5pdChsaW5lV2lkdGgpLAogICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBfdGhpczQuY29sb3IsCiAgICAgICAgICB0cmFuc2Zvcm06ICJ0cmFuc2xhdGVYKCIgKyBsZWZ0ICsgInB4KSB0cmFuc2xhdGVYKC01MCUpIgogICAgICAgIH07CiAgICAgICAgaWYgKHNob3VsZEFuaW1hdGUpIHsKICAgICAgICAgIGxpbmVTdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBfdGhpczQuZHVyYXRpb24gKyAicyI7CiAgICAgICAgfQogICAgICAgIGlmIChpc0RlZihsaW5lSGVpZ2h0KSkgewogICAgICAgICAgdmFyIGhlaWdodCA9IGFkZFVuaXQobGluZUhlaWdodCk7CiAgICAgICAgICBsaW5lU3R5bGUuaGVpZ2h0ID0gaGVpZ2h0OwogICAgICAgICAgbGluZVN0eWxlLmJvcmRlclJhZGl1cyA9IGhlaWdodDsKICAgICAgICB9CiAgICAgICAgX3RoaXM0LmxpbmVTdHlsZSA9IGxpbmVTdHlsZTsKICAgICAgfSk7CiAgICB9LAogICAgLy8gY29ycmVjdCB0aGUgaW5kZXggb2YgYWN0aXZlIHRhYgogICAgc2V0Q3VycmVudEluZGV4QnlOYW1lOiBmdW5jdGlvbiBzZXRDdXJyZW50SW5kZXhCeU5hbWUobmFtZSkgewogICAgICB2YXIgbWF0Y2hlZCA9IHRoaXMuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uICh0YWIpIHsKICAgICAgICByZXR1cm4gdGFiLmNvbXB1dGVkTmFtZSA9PT0gbmFtZTsKICAgICAgfSk7CiAgICAgIHZhciBkZWZhdWx0SW5kZXggPSAodGhpcy5jaGlsZHJlblswXSB8fCB7fSkuaW5kZXggfHwgMDsKICAgICAgdGhpcy5zZXRDdXJyZW50SW5kZXgobWF0Y2hlZC5sZW5ndGggPyBtYXRjaGVkWzBdLmluZGV4IDogZGVmYXVsdEluZGV4KTsKICAgIH0sCiAgICBzZXRDdXJyZW50SW5kZXg6IGZ1bmN0aW9uIHNldEN1cnJlbnRJbmRleChjdXJyZW50SW5kZXgpIHsKICAgICAgdmFyIG5ld0luZGV4ID0gdGhpcy5maW5kQXZhaWxhYmxlVGFiKGN1cnJlbnRJbmRleCk7CiAgICAgIGlmICghaXNEZWYobmV3SW5kZXgpKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHZhciBuZXdUYWIgPSB0aGlzLmNoaWxkcmVuW25ld0luZGV4XTsKICAgICAgdmFyIG5ld05hbWUgPSBuZXdUYWIuY29tcHV0ZWROYW1lOwogICAgICB2YXIgc2hvdWxkRW1pdENoYW5nZSA9IHRoaXMuY3VycmVudEluZGV4ICE9PSBudWxsOwogICAgICB0aGlzLmN1cnJlbnRJbmRleCA9IG5ld0luZGV4OwogICAgICBpZiAobmV3TmFtZSAhPT0gdGhpcy5hY3RpdmUpIHsKICAgICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIG5ld05hbWUpOwogICAgICAgIGlmIChzaG91bGRFbWl0Q2hhbmdlKSB7CiAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCBuZXdOYW1lLCBuZXdUYWIudGl0bGUpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGZpbmRBdmFpbGFibGVUYWI6IGZ1bmN0aW9uIGZpbmRBdmFpbGFibGVUYWIoaW5kZXgpIHsKICAgICAgdmFyIGRpZmYgPSBpbmRleCA8IHRoaXMuY3VycmVudEluZGV4ID8gLTEgOiAxOwogICAgICB3aGlsZSAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKSB7CiAgICAgICAgaWYgKCF0aGlzLmNoaWxkcmVuW2luZGV4XS5kaXNhYmxlZCkgewogICAgICAgICAgcmV0dXJuIGluZGV4OwogICAgICAgIH0KICAgICAgICBpbmRleCArPSBkaWZmOwogICAgICB9CiAgICB9LAogICAgLy8gZW1pdCBldmVudCB3aGVuIGNsaWNrZWQKICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soaXRlbSwgaW5kZXgpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CiAgICAgIHZhciBfdGhpcyRjaGlsZHJlbiRpbmRleCA9IHRoaXMuY2hpbGRyZW5baW5kZXhdLAogICAgICAgIHRpdGxlID0gX3RoaXMkY2hpbGRyZW4kaW5kZXgudGl0bGUsCiAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRjaGlsZHJlbiRpbmRleC5kaXNhYmxlZCwKICAgICAgICBjb21wdXRlZE5hbWUgPSBfdGhpcyRjaGlsZHJlbiRpbmRleC5jb21wdXRlZE5hbWU7CiAgICAgIGlmIChkaXNhYmxlZCkgewogICAgICAgIHRoaXMuJGVtaXQoJ2Rpc2FibGVkJywgY29tcHV0ZWROYW1lLCB0aXRsZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY2FsbEludGVyY2VwdG9yKHsKICAgICAgICAgIGludGVyY2VwdG9yOiB0aGlzLmJlZm9yZUNoYW5nZSwKICAgICAgICAgIGFyZ3M6IFtjb21wdXRlZE5hbWVdLAogICAgICAgICAgZG9uZTogZnVuY3Rpb24gZG9uZSgpIHsKICAgICAgICAgICAgX3RoaXM1LnNldEN1cnJlbnRJbmRleChpbmRleCk7CiAgICAgICAgICAgIF90aGlzNS5zY3JvbGxUb0N1cnJlbnRDb250ZW50KCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgdGhpcy4kZW1pdCgnY2xpY2snLCBjb21wdXRlZE5hbWUsIHRpdGxlKTsKICAgICAgICByb3V0ZShpdGVtLiRyb3V0ZXIsIGl0ZW0pOwogICAgICB9CiAgICB9LAogICAgLy8gc2Nyb2xsIGFjdGl2ZSB0YWIgaW50byB2aWV3CiAgICBzY3JvbGxJbnRvVmlldzogZnVuY3Rpb24gc2Nyb2xsSW50b1ZpZXcoaW1tZWRpYXRlKSB7CiAgICAgIHZhciB0aXRsZXMgPSB0aGlzLiRyZWZzLnRpdGxlczsKICAgICAgaWYgKCF0aGlzLnNjcm9sbGFibGUgfHwgIXRpdGxlcyB8fCAhdGl0bGVzW3RoaXMuY3VycmVudEluZGV4XSkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB2YXIgbmF2ID0gdGhpcy4kcmVmcy5uYXY7CiAgICAgIHZhciB0aXRsZSA9IHRpdGxlc1t0aGlzLmN1cnJlbnRJbmRleF0uJGVsOwogICAgICB2YXIgdG8gPSB0aXRsZS5vZmZzZXRMZWZ0IC0gKG5hdi5vZmZzZXRXaWR0aCAtIHRpdGxlLm9mZnNldFdpZHRoKSAvIDI7CiAgICAgIHNjcm9sbExlZnRUbyhuYXYsIHRvLCBpbW1lZGlhdGUgPyAwIDogK3RoaXMuZHVyYXRpb24pOwogICAgfSwKICAgIG9uU3RpY2t0U2Nyb2xsOiBmdW5jdGlvbiBvblN0aWNrdFNjcm9sbChwYXJhbXMpIHsKICAgICAgdGhpcy5zdGlja3lGaXhlZCA9IHBhcmFtcy5pc0ZpeGVkOwogICAgICB0aGlzLiRlbWl0KCdzY3JvbGwnLCBwYXJhbXMpOwogICAgfSwKICAgIC8vIEBleHBvc2VkLWFwaQogICAgc2Nyb2xsVG86IGZ1bmN0aW9uIHNjcm9sbFRvKG5hbWUpIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CiAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczYuc2V0Q3VycmVudEluZGV4QnlOYW1lKG5hbWUpOwogICAgICAgIF90aGlzNi5zY3JvbGxUb0N1cnJlbnRDb250ZW50KHRydWUpOwogICAgICB9KTsKICAgIH0sCiAgICBzY3JvbGxUb0N1cnJlbnRDb250ZW50OiBmdW5jdGlvbiBzY3JvbGxUb0N1cnJlbnRDb250ZW50KGltbWVkaWF0ZSkgewogICAgICB2YXIgX3RoaXM3ID0gdGhpczsKICAgICAgaWYgKGltbWVkaWF0ZSA9PT0gdm9pZCAwKSB7CiAgICAgICAgaW1tZWRpYXRlID0gZmFsc2U7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuc2Nyb2xsc3B5KSB7CiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMuY2hpbGRyZW5bdGhpcy5jdXJyZW50SW5kZXhdOwogICAgICAgIHZhciBlbCA9IHRhcmdldCA9PSBudWxsID8gdm9pZCAwIDogdGFyZ2V0LiRlbDsKICAgICAgICBpZiAoZWwpIHsKICAgICAgICAgIHZhciB0byA9IGdldEVsZW1lbnRUb3AoZWwsIHRoaXMuc2Nyb2xsZXIpIC0gdGhpcy5zY3JvbGxPZmZzZXQ7CiAgICAgICAgICB0aGlzLmxvY2tTY3JvbGwgPSB0cnVlOwogICAgICAgICAgc2Nyb2xsVG9wVG8odGhpcy5zY3JvbGxlciwgdG8sIGltbWVkaWF0ZSA/IDAgOiArdGhpcy5kdXJhdGlvbiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBfdGhpczcubG9ja1Njcm9sbCA9IGZhbHNlOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgb25TY3JvbGw6IGZ1bmN0aW9uIG9uU2Nyb2xsKCkgewogICAgICBpZiAodGhpcy5zY3JvbGxzcHkgJiYgIXRoaXMubG9ja1Njcm9sbCkgewogICAgICAgIHZhciBpbmRleCA9IHRoaXMuZ2V0Q3VycmVudEluZGV4T25TY3JvbGwoKTsKICAgICAgICB0aGlzLnNldEN1cnJlbnRJbmRleChpbmRleCk7CiAgICAgIH0KICAgIH0sCiAgICBnZXRDdXJyZW50SW5kZXhPblNjcm9sbDogZnVuY3Rpb24gZ2V0Q3VycmVudEluZGV4T25TY3JvbGwoKSB7CiAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47CiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBjaGlsZHJlbi5sZW5ndGg7IGluZGV4KyspIHsKICAgICAgICB2YXIgdG9wID0gZ2V0VmlzaWJsZVRvcChjaGlsZHJlbltpbmRleF0uJGVsKTsKICAgICAgICBpZiAodG9wID4gdGhpcy5zY3JvbGxPZmZzZXQpIHsKICAgICAgICAgIHJldHVybiBpbmRleCA9PT0gMCA/IDAgOiBpbmRleCAtIDE7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBjaGlsZHJlbi5sZW5ndGggLSAxOwogICAgfQogIH0sCiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICB2YXIgX3RoaXM4ID0gdGhpcywKICAgICAgX3JlZjsKICAgIHZhciBoID0gYXJndW1lbnRzWzBdOwogICAgdmFyIHR5cGUgPSB0aGlzLnR5cGUsCiAgICAgIGFuaW1hdGVkID0gdGhpcy5hbmltYXRlZCwKICAgICAgc2Nyb2xsYWJsZSA9IHRoaXMuc2Nyb2xsYWJsZTsKICAgIHZhciBOYXYgPSB0aGlzLmNoaWxkcmVuLm1hcChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHsKICAgICAgdmFyIF9pdGVtJGJhZGdlOwogICAgICByZXR1cm4gaChUaXRsZSwgewogICAgICAgICJyZWYiOiAidGl0bGVzIiwKICAgICAgICAicmVmSW5Gb3IiOiB0cnVlLAogICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICJ0eXBlIjogdHlwZSwKICAgICAgICAgICJkb3QiOiBpdGVtLmRvdCwKICAgICAgICAgICJpbmZvIjogKF9pdGVtJGJhZGdlID0gaXRlbS5iYWRnZSkgIT0gbnVsbCA/IF9pdGVtJGJhZGdlIDogaXRlbS5pbmZvLAogICAgICAgICAgInRpdGxlIjogaXRlbS50aXRsZSwKICAgICAgICAgICJjb2xvciI6IF90aGlzOC5jb2xvciwKICAgICAgICAgICJpc0FjdGl2ZSI6IGluZGV4ID09PSBfdGhpczguY3VycmVudEluZGV4LAogICAgICAgICAgImRpc2FibGVkIjogaXRlbS5kaXNhYmxlZCwKICAgICAgICAgICJzY3JvbGxhYmxlIjogc2Nyb2xsYWJsZSwKICAgICAgICAgICJhY3RpdmVDb2xvciI6IF90aGlzOC50aXRsZUFjdGl2ZUNvbG9yLAogICAgICAgICAgImluYWN0aXZlQ29sb3IiOiBfdGhpczgudGl0bGVJbmFjdGl2ZUNvbG9yCiAgICAgICAgfSwKICAgICAgICAic3R5bGUiOiBpdGVtLnRpdGxlU3R5bGUsCiAgICAgICAgImNsYXNzIjogaXRlbS50aXRsZUNsYXNzLAogICAgICAgICJzY29wZWRTbG90cyI6IHsKICAgICAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgICAgICByZXR1cm4gaXRlbS5zbG90cygndGl0bGUnKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJvbiI6IHsKICAgICAgICAgICJjbGljayI6IGZ1bmN0aW9uIGNsaWNrKCkgewogICAgICAgICAgICBfdGhpczgub25DbGljayhpdGVtLCBpbmRleCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwogICAgdmFyIFdyYXAgPSBoKCJkaXYiLCB7CiAgICAgICJyZWYiOiAid3JhcCIsCiAgICAgICJjbGFzcyI6IFtiZW0oJ3dyYXAnLCB7CiAgICAgICAgc2Nyb2xsYWJsZTogc2Nyb2xsYWJsZQogICAgICB9KSwgKF9yZWYgPSB7fSwgX3JlZltCT1JERVJfVE9QX0JPVFRPTV0gPSB0eXBlID09PSAnbGluZScgJiYgdGhpcy5ib3JkZXIsIF9yZWYpXQogICAgfSwgW2goImRpdiIsIHsKICAgICAgInJlZiI6ICJuYXYiLAogICAgICAiYXR0cnMiOiB7CiAgICAgICAgInJvbGUiOiAidGFibGlzdCIKICAgICAgfSwKICAgICAgImNsYXNzIjogYmVtKCduYXYnLCBbdHlwZSwgewogICAgICAgIGNvbXBsZXRlOiB0aGlzLnNjcm9sbGFibGUKICAgICAgfV0pLAogICAgICAic3R5bGUiOiB0aGlzLm5hdlN0eWxlCiAgICB9LCBbdGhpcy5zbG90cygnbmF2LWxlZnQnKSwgTmF2LCB0eXBlID09PSAnbGluZScgJiYgaCgiZGl2IiwgewogICAgICAiY2xhc3MiOiBiZW0oJ2xpbmUnKSwKICAgICAgInN0eWxlIjogdGhpcy5saW5lU3R5bGUKICAgIH0pLCB0aGlzLnNsb3RzKCduYXYtcmlnaHQnKV0pXSk7CiAgICByZXR1cm4gaCgiZGl2IiwgewogICAgICAiY2xhc3MiOiBiZW0oW3R5cGVdKQogICAgfSwgW3RoaXMuc3RpY2t5ID8gaChTdGlja3ksIHsKICAgICAgImF0dHJzIjogewogICAgICAgICJjb250YWluZXIiOiB0aGlzLiRlbCwKICAgICAgICAib2Zmc2V0VG9wIjogdGhpcy5vZmZzZXRUb3AKICAgICAgfSwKICAgICAgIm9uIjogewogICAgICAgICJzY3JvbGwiOiB0aGlzLm9uU3RpY2t0U2Nyb2xsCiAgICAgIH0KICAgIH0sIFtXcmFwXSkgOiBXcmFwLCBoKENvbnRlbnQsIHsKICAgICAgImF0dHJzIjogewogICAgICAgICJjb3VudCI6IHRoaXMuY2hpbGRyZW4ubGVuZ3RoLAogICAgICAgICJhbmltYXRlZCI6IGFuaW1hdGVkLAogICAgICAgICJkdXJhdGlvbiI6IHRoaXMuZHVyYXRpb24sCiAgICAgICAgInN3aXBlYWJsZSI6IHRoaXMuc3dpcGVhYmxlLAogICAgICAgICJjdXJyZW50SW5kZXgiOiB0aGlzLmN1cnJlbnRJbmRleAogICAgICB9LAogICAgICAib24iOiB7CiAgICAgICAgImNoYW5nZSI6IHRoaXMuc2V0Q3VycmVudEluZGV4CiAgICAgIH0KICAgIH0sIFt0aGlzLnNsb3RzKCldKV0pOwogIH0KfSk7"},null]}