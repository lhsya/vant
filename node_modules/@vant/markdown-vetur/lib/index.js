"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseAndWrite = void 0;
const fast_glob_1 = __importDefault(require("fast-glob"));
const path_1 = require("path");
const parser_1 = require("./parser");
const formatter_1 = require("./formatter");
const web_types_1 = require("./web-types");
const fs_extra_1 = require("fs-extra");
const utils_1 = require("./utils");
const vetur_1 = require("./vetur");
async function readMarkdown(options) {
    const mds = await (0, fast_glob_1.default)((0, utils_1.normalizePath)(`${options.path}/**/*.md`));
    return mds
        .filter((md) => options.test.test(md))
        .map((path) => (0, fs_extra_1.readFileSync)(path, 'utf-8'));
}
async function parseAndWrite(options) {
    if (!options.outputDir) {
        throw new Error('outputDir can not be empty.');
    }
    const mds = await readMarkdown(options);
    const vueTags = [];
    mds.forEach((md) => {
        const parsedMd = (0, parser_1.mdParser)(md);
        (0, formatter_1.formatter)(vueTags, parsedMd, options.tagPrefix);
    });
    const webTypes = (0, web_types_1.genWebTypes)(vueTags, options);
    const veturTags = (0, vetur_1.genVeturTags)(vueTags);
    const veturAttributes = (0, vetur_1.genVeturAttributes)(vueTags);
    (0, fs_extra_1.outputFileSync)((0, path_1.join)(options.outputDir, 'tags.json'), JSON.stringify(veturTags, null, 2));
    (0, fs_extra_1.outputFileSync)((0, path_1.join)(options.outputDir, 'attributes.json'), JSON.stringify(veturAttributes, null, 2));
    (0, fs_extra_1.outputFileSync)((0, path_1.join)(options.outputDir, 'web-types.json'), JSON.stringify(webTypes, null, 2));
}
exports.parseAndWrite = parseAndWrite;
exports.default = { parseAndWrite };
